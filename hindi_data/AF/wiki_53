{"url": "https://hi.wikipedia.org/wiki?curid=181762", "text": "सॉफ्टवेयर परीक्षण\n\nसॉफ्टवेयर परीक्षण एक अनुभवजन्य खोज है, जिसके तहत हितधारकों को परीक्षणाधीन उत्पाद या सेवा की गुणवत्ता के बारे में, उस संदर्भ में जानकारी उपलब्ध कराई जाती है, जहाँ इसे प्रयोग के लिए नियत किया गया है। सॉफ्टवेयर परीक्षण, उद्योग को सॉफ्टवेयर के कार्यान्वयन में जोखिम को समझने और सराहना करने की अनुमति देने के लिए, सॉफ्टवेयर का उद्देश्य और स्वतंत्र अवलोकन भी प्रदान करता है। टेस्ट तकनीकों में शामिल है, लेकिन इतने तक ही सीमित नहीं, सॉफ्टवेयर बग खोजने के इरादे से एक प्रोग्राम या अनुप्रयोग के निष्पादन की प्रक्रिया।\n\nयह भी कहा जा सकता है कि सॉफ्टवेयर परीक्षण वह प्रक्रिया है, जो यह विधिमान्य और सत्यापित करती है कि एक सॉफ्टवेयर प्रोग्राम/अनुप्रयोग/उत्पाद:\n\n\nकार्यरत परीक्षण पद्धति के आधार पर, सॉफ्टवेयर परीक्षण को विकास की प्रक्रिया में किसी भी समय लागू किया जा सकता है। बहरहाल, टेस्ट के अधिकांश प्रयास तब शुरू होते हैं, जब आवश्यकताओं को परिभाषित कर दिया गया हो और कोडिंग प्रक्रिया पूर्ण हो गई हो। विभिन्न सॉफ्टवेयर विकास मॉडल, विकास की प्रक्रिया में परीक्षण प्रयास को विभिन्न चरणों पर केन्द्रित करते हैं। एक अधिक पारंपरिक मॉडल में, परीक्षण के अधिकांश प्रयास तब शुरू होते हैं, जब आवश्यकताओं को परिभाषित कर दिया गया हो और कोडिंग प्रक्रिया पूर्ण हो गई हो। अपेक्षाकृत नए विकास मॉडल, जैसे Agile या XP, अक्सर विकास संचालित परीक्षण का प्रयोग करते हैं और विकास की प्रक्रिया में परीक्षण का ज्यादा हिस्सा, डेवलपर को सौंपते हैं।\n\nपरीक्षण, पूरी तरह से सॉफ्टवेयर के भीतर सभी दोषों की पहचान नहीं कर सकता है। इसके बजाय, यह एक \"आलोचना\" या \"तुलना\" प्रस्तुत करता है, जो प्रामाणिक- सिद्धांत या व्यवस्था के प्रति, जिसके द्वारा एक व्यक्ति किसी समस्या को पहचान सकता है - उत्पाद की स्थिति और व्यवहार की तुलना करता है। इन प्रामाणिकताओं में शामिल हो सकते हैं (लेकिन यहीं तक सीमित नहीं है) विनिर्देशन, अनुबन्ध, तुलनीय उत्पाद, उसी उत्पाद का पिछला संस्करण, नियत या अपेक्षित उद्देश्यों का अनुमान, उपयोगकर्ता या ग्राहक की अपेक्षाएं, उपयुक्त मानक, प्रयोज्य नियम, या अन्य मानदंड।\n\nहर सॉफ्टवेयर उत्पाद के लक्षित दर्शक होते हैं। उदाहरण के लिए, वीडियो गेम सॉफ़्टवेयर के दर्शक, बैंकिंग सॉफ्टवेयर से पूरी तरह से अलग है। इसलिए, जब एक संगठन किसी सॉफ्टवेयर उत्पाद को विकसित अथवा उसमें निवेश करता है, तो वह यह आकलन कर सकता है कि सॉफ्टवेयर उत्पाद अपने अन्तिम उपयोगकर्ताओं, अपने लक्षित दर्शकों, अपने खरीदारों और अन्य हितधारकों को स्वीकार्य होगा या नहीं। सॉफ्टवेयर परीक्षण इस मूल्यांकन के प्रयास की प्रक्रिया है।\n\n2002 में NIST द्वारा किए गए एक अध्ययन से यह पता चलता है कि सॉफ्टवेयर बग से अमेरिकी अर्थव्यवस्था को सालाना $59.5 बीलियन की चपत लगती है। यदि बेहतर सॉफ्टवेयर परीक्षण की जाए, तो इस लागत का एक तिहाई हिस्सा बचाया जा सकता है।\n\nप्रारंभ में परीक्षण से डीबगिंग के पृथक्करण को ग्लेन्फोर्ड जे. मायर्स द्वारा 1979 में प्रवर्तित किया गया। हालांकि उनका ध्यान ब्रेकेज परीक्षण पर था (\"एक सफल परीक्षण वह है, जो एक बग को खोजती है\") इसने सॉफ्टवेयर इंजीनियरिंग समुदाय की बुनियादी विकास गतिविधियों, जैसे डीबगिंग को सत्यापन से अलग करने की इच्छा की पुष्टि की। डेव गेल्परिन और विलियम सी. हेत्ज़ेल ने 1988 में सॉफ्टवेयर परीक्षण में प्रावस्थाओं और लक्ष्यों को निम्नलिखित चरणों में वर्गीकृत किया है:\n\n\nपरीक्षण का एक प्राथमिक उद्देश्य, सॉफ्टवेयर विफलताओं का पता लगाना है, ताकि दोषों को खोजा और सुधारा जा सके। यह एक गैर-नगण्य खोज है। परीक्षण यह स्थापित नहीं कर सकता कि एक उत्पाद सभी परिस्थितियों में ठीक-ठीक कार्य कर रहा है, पर सिर्फ इतना स्थापित कर सकता है कि यह किन विशिष्ट परिस्थितियों में ठीक-ठीक काम नहीं करता है। सॉफ्टवेयर परीक्षण के कार्यक्षेत्र में अक्सर कोड की परीक्षा के अलावा विभिन्न वातावरण और परिस्थितियों में उस कोड का निष्पादन, साथ ही, उस कोड के पहलुओं की जांच शामिल है: क्या यह वह कार्य करता है जो इसे करना चाहिए और क्या यह, वह करता जो इसे करने की ज़रूरत है। सॉफ्टवेयर विकास की वर्तमान संस्कृति में एक परीक्षण संगठन, विकास दल से अलग हो सकता है। परीक्षण दल के सदस्यों के लिए विभिन्न भूमिकाएं होतीं हैं। सॉफ्टवेयर परीक्षण से प्राप्त जानकारी का प्रयोग, उस प्रक्रिया को सही करने के लिए किया जा सकता है, जिसके द्वारा सॉफ्टवेयर का विकास किया गया है।\n\nफंक्शनल परीक्षण उस परीक्षण से संबन्ध रखता है, जो कोड की एक विशिष्ट कार्रवाई या प्रकार्य को सत्यापित करता है। ये आम तौर पर कोड की आवश्यकताओं के प्रलेखन में पाया जाता है, हालांकि कुछ विकास प्रक्रिया, प्रयुक्त मामले या उपयोगकर्ता ख़बरों से काम करते हैं। फंक्शनल टेस्ट इस सवाल का जवाब देते हैं कि \"क्या उपयोगकर्ता इसे कर सकता है\" या \"क्या यह विशेष सुविधा काम करती है\"।\n\nनॉन-फंक्शनल परीक्षण, सॉफ्टवेयर के उन पहलुओं को दर्शाता है, जो संभव है कि किसी विशेष प्रकार्य या उपयोगकर्ता की क्रिया, जैसे आरोहण या सुरक्षा से संबन्धित ना हों. नॉन-फंक्शनल परीक्षण इस तरह के सवालों का जवाब देता है कि \"एक बार में कितने लोग लॉग इन कर सकते हैं\", या \"इस सॉफ्टवेयर को हैक करना कितना आसान है\"।\n\nसॉफ्टवेयर के सभी दोष, कोड की त्रुटियों के कारण नहीं होते हैं। महंगे दोषों का एक आम स्रोत, अपेक्षाओं के अन्तराल के कारण पनपता है, उदाहरण है, अपरिचित अपेक्षाएं, जो प्रोग्राम डिजाइनर द्वारा विलोपन की त्रुटियों में फलित होते हैं। अपेक्षा अन्तराल का एक आम स्रोत, ग़ैर-कार्यात्मक अपेक्षा है, जैसे परीक्षण-क्षमता, आरोहण-क्षमता, अनुरक्षण-क्षमता, उपयोग-क्षमता, निष्पादन और सुरक्षा।\n\nसॉफ्टवेयर दोष निम्नलिखित प्रक्रियाओं के माध्यम से होते हैं। प्रोग्रामर एक त्रुटि (ग़लती) करता है, जो सॉफ्टवेयर के सोर्स कोड में एक ख़राबी (दोष, बग) में फलित होता है। यदि इस ख़राबी को निष्पादित किया जाता है, तो कुछ ख़ास स्थितियों में सिस्टम त्रुटिपुर्ण परिणाम देगा, जो एक विफलता का कारण बनेगा। सभी दोष आवश्यक रूप से विफलता में परिणत नहीं होंगे। उदाहरण के लिए, डेड कोड में दोष, कभी विफलता में परिणत नहीं होंगे। जब परिवेश बदला जाता है, तब एक ख़राबी विफलता में बदल सकती है। परिवेशगत इन परिवर्तनों के उदाहरणों में शामिल हैं, सॉफ्टवेयर का एक नए हार्डवेयर प्लेटफोर्म पर चलाया जाना, सोर्स डाटा में परिवर्तन या भिन्न सॉफ्टवेयर के साथ पारस्परिक क्रिया. एक एकल त्रुटि, विफलता के विस्तृत लक्षण में परिणत हो सकती है।\n\nआम तौर पर यह माना जाता है कि एक ख़राबी को जितना पहले खोजा जाए, उसे ठीक करना उतना ही सस्ता होता है। \nनिम्नलिखित तालिका, ख़राबी के पता लगाए जाने वाले चरण के आधार पर, उसे ठीक करने की लागत को दर्शाती है। उदाहरण के लिए, यदि अपेक्षाओं में कोई समस्या सिर्फ रिलीज़ के बाद सामने आती है, तो इसका खर्चा अपेक्षाओं की समीक्षा द्वारा ही पता लगा लिए जाने के खर्चे से 10-100 गुणा अधिक होगा।\n\nसॉफ्टवेयर विफलता का एक आम कारण, अन्य अनुप्रयोग, एक नए ऑपरेटिंग सिस्टम, या, बढ़ते हुए वेब ब्राउज़र संस्करण के साथ संगतता है। पश्च संगतता की कमी के मामले में, यह (उदाहरण के लिए। ..) इसलिए हो सकता है, क्योंकि प्रोग्रामर ने अपने प्रोग्राम की कोडिंग या सॉफ्टवेयर का परीक्षण सिर्फ़, इस-और-उस ऑपरेटिंग सिस्टम \"के \"नवीनतम\" संस्करण\" पर करने का विचार किया। इस तथ्य का अनायास नतीजा यह है कि: उनका नवीनतम कार्य, सॉफ्टवेयर/हार्डवेयर के पूर्व मिश्रण के साथ पूरी तरह से संगत नहीं भी हो सकता है, या यह \"एक अन्य\" महत्वपूर्ण ऑपरेटिंग सिस्टम के साथ पूरी तरह से संगत नहीं हो सकता है। किसी भी स्थिति में, ये मतभेद, वे जो भी हों, (अनपेक्षित...) सॉफ्टवेयर विफलता में परिणत हुए होंगे, जैसा कि कंप्यूटर प्रयोक्ताओं के कुछ महत्वपूर्ण तबके ने महसूस किया।\n\nइसे एक \"सुरक्षा उन्मुख रणनीति\" मान सकते हैं, जो कि डेव गेल्परिन और विलियम सी. हेत्ज़ेल द्वारा सुझाए नवीनतम परिक्षण चरण के साथ सटीक बैठता है, जैसा कि नीचे उद्धृत है।.\n\nसॉफ्टवेयर परीक्षण के साथ एक मुख्य समस्या है कि इनपुट और प्री-कंडीशन (प्रारम्भिक स्थिति) के \"सारे\" कॉम्बिनेशन के अन्तर्गत परीक्षण संभव नहीं है, यहाँ तक कि एक सामान्य उत्पाद के साथ भी नहीं। इसका मतलब है कि सॉफ्टवेयर उत्पाद में दोषों की संख्या काफी अधिक हो सकती हैं और जो दोष कभी-कभी होते हैं उन्हें परीक्षण में खोजना मुश्किल है। अधिक महत्वपूर्ण रूप से, गुणवत्ता के ग़ैर-कार्यात्मक आयाम (इसे कैसा \"होना\" चाहिए बनाम इसे क्या \"करना\" चाहिए)- उपयोग-क्षमता, आरोहण-क्षमता, निष्पादन, संगतता, विश्वसनीयता-अत्यंत व्यक्तिपरक हो सकते हैं; कुछ ऐसा, जो एक व्यक्ति के लिए पर्याप्त मूल्य का गठन करता है, जो दूसरे के लिए असहनीय है।\n\nसॉफ्टवेयर परीक्षण के लिए कई दृष्टिकोण हैं। समीक्षा, आर-पार गुज़ारना, या निरीक्षण को स्टैटिक परीक्षण माना जाता है, जबकि दिए गए एक परीक्षण मामले के सेट के साथ वास्तविक निष्पादित प्रोग्राम कोड डाइनेमिक परीक्षण माना जाता है। स्टैटिक परीक्षण को (और दुर्भाग्य से व्यवहार में अक्सर जैसा होता है) छोड़ा जा सकता है। डाइनेमिक परीक्षण तब प्रयुक्त होता है, जब खुद प्रोग्राम को ही पहली बार प्रयोग किया जा रहा हो (जिसे आम तौर पर परीक्षण चरण की शुरूआत माना जाता है)। डाइनेमिक परीक्षण, प्रोग्राम के 100% पूर्ण होने से पहले कोड के विशेष हिस्सों के परीक्षण के लिए शुरू हो सकती है (मॉड्यूल या डिस्क्रीट फंक्शन)। इसके लिए विशिष्ट तकनीक हैं स्टब्स/ड्राइवर्स का प्रयोग करना या फिर एक डिबगर परिवेश से निष्पादन. उदाहरण के लिए, स्प्रेडशीट प्रोग्राम, खुद अपनी प्रकृति द्वारा, काफी हद तक परस्पर रूप से (\"ऑन द फ्लाई\") जांचे जाते हैं, जिसके तहत परिणाम, प्रत्येक गणना या टेक्स्ट परिचालन के तुरंत बाद प्रदर्शित होते हैं।\n\nसॉफ्टवेयर परीक्षण का प्रयोग सत्यापन और प्रमाणीकरण के साहचर्य से किया जाता है:\n\n\nसत्यापन और प्रमाणीकरण शब्द का आम तौर पर प्रयोग, उद्योग में अन्तर-परिवर्तनशीलता से किया जाता है; इन दोनों शब्दों को ग़लत तरीके से परिभाषित करना भी आम है। IEEE सॉफ्टवेयर इंजीनियरिंग की मानक शब्दावली के अनुसार:\n\nसॉफ्टवेयर परीक्षण \"सॉफ्टवेयर टेस्टर\" द्वारा की जा सकती है। 1980 के दशक तक शब्द \"सॉफ्टवेयर टेस्टर\" को आम तौर पर इस्तेमाल किया जाता था, लेकिन बाद में इसे एक अलग व्यवसाय के रूप में देखा गया। सॉफ्टवेयर परीक्षण में अवधियों और विभिन्न लक्ष्यों से संबन्धित विभिन्न भूमिकाओं को स्थापित किया गया है: \"मैनेजर\", \"टेस्ट लीड\", \"टेस्ट डिजाइनर\", \"टेस्टर\", \"ऑटोमेशन डेवलपर\" और \"टेस्ट एडमिनिसट्रेटर\"\n\nहालांकि विवादास्पद, सॉफ्टवेयर परीक्षण को सॉफ्टवेयर क्वालिटी अश्युरेन्स (SQA) प्रक्रिया के एक महत्वपूर्ण हिस्से के रूप में देखा जा सकता है। SQA में, सॉफ्टवेयर प्रक्रिया विशेषज्ञ और लेखा परीक्षक, सॉफ्टवेयर और उसके विकास पर एक व्यापक दृष्टिकोण रखते हैं। वे सॉफ्टवेयर इंजीनियरिंग प्रक्रिया की जांच करते हैं और प्रदत्त सॉफ्टवेयर में मौजूद दोषों: तथाकथित \"दोष दर\" की मात्रा को कम करने के लिए उसे ही बदल देते हैं।\n\nएक \"स्वीकार्य दोष दर\" का गठन करने वाली चीज़ें सॉफ्टवेयर की प्रकृति पर निर्भर करती हैं। उदाहरण के लिए, एक आर्केड वीडियो गेम में, जिसे एक हवाई जहाज उड़ाने का \"आभास\" देने के लिए डिज़ाइन किया गया है, संभवतः दोषों के प्रति अपेक्षाकृत अधिक सहनशीलता होगी, उस मिशन क्रिटिकल सॉफ्टवेयर की तुलना में, जिसका उपयोग एक एयरलाइनर को नियंत्रित करने में होता है, जो \"वास्तव में\" उड़ रहा है।\n\nयद्यपि SQA के साथ घनिष्ठ संबन्ध हैं, परीक्षण विभाग अक्सर स्वतंत्र रूप से कार्य करते हैं और हो सकता है कि किसी कंपनी में SQA का कोई कार्य ना हो।\n\nसॉफ्टवेयर परीक्षण, एक कंप्यूटर प्रोग्राम के अपेक्षित परिणामों को, दिए गए एक इनपुट सेट के लिए, इसके वास्तविक परिणामों से तुलना करते हुए, सॉफ्टवेयर में दोषों का पता लगाने के उद्देश्य से किया गया कार्य है। विरोधाभास स्वरूप, QA (क्वालिटी अश्युरेन्स), दरअसल होने वाली त्रुटियों को रोकने के उद्देश्य से नीतियों और प्रक्रियाओं का कार्यान्वयन है।\n\nसॉफ्टवेयर परीक्षण तरीक़ों को परंपरागत रूप से ब्लैक बॉक्स परीक्षण और व्हाईट बॉक्स परीक्षण में विभाजित किया गया हैं। इन दोनों अभिगमों का प्रयोग उस दृष्टिकोण के वर्णन के लिए किया जाता है, जो एक टेस्ट इंजीनियर टेस्ट मामलों की डिजाइनिंग के लिए अपनाता है।\n\nब्लैक बॉक्स परीक्षण, सॉफ्टवेयर से एक \"ब्लैक बॉक्स\" के रूप में व्यवहार करता है - बिना किसी आंतरिक कार्यान्वयन की जानकारी के ब्लैक बॉक्स परीक्षण तरीकों में शामिल हैं: इक्विवेलेंस पार्टिशनिंग, बाउंड्री वैल्यू एनैलिसिस, ऑल पेयर्स परीक्षण, फ़ज परीक्षण, मॉडल-बेस्ड परीक्षण, ट्रेसेबिलिटी मेट्रिक्स, एक्स्प्लोरेटरी परीक्षण और स्पेसीफिकेशन-बेस्ड परीक्षण।\n\nइसलिए, ब्लैक बॉक्स परीक्षण में एक ओर \"एक असम्बद्ध राय\" का फायदा है और दूसरी ओर \"अंधी तलाश\" का नुक्सान।\nव्हाइट बॉक्स परीक्षण तब होती है जब परीक्षक के पास, आंतरिक डाटा संरचनाओं और इसे लागू करने वाले कोड सहित एल्गोरिदम तक पहुंच सुलभ होती है।\n\n\n\nवे दोनों एक कोड कवरेज मीट्रिक को लौटाते हैं, जिसे प्रतिशत के रूप में मापा जाता है।\n\nग्रे बॉक्स परीक्षण में शामिल है आंतरिक डाटा संरचनाओं और एल्गोरिदम तक, परीक्षण मामलों को डिजाइन करने के लिए पहुंच, लेकिन उपयोगकर्ता, या ब्लैक बॉक्स स्तर पर परीक्षण. इनपुट डाटा का परिवर्तन और आउटपुट को फोर्मेट करना, ग्रे बॉक्स के तहत नहीं आता, क्योंकि इनपुट और आउटपुट उस \"ब्लैक-बॉक्स\" से स्पष्ट रूप से बाहर है, जिसे हम परीक्षण के तहत सिस्टम कह रहे हैं। यह अन्तर विशेष रूप से तब महत्वपूर्ण है, जब दो अलग डेवलपर्स द्वारा लिखे कोड के दो मॉड्यूलों के बीच इंटीग्रेशन परीक्षण सम्पादित की जाती है, जहाँ परीक्षण के लिए सिर्फ़ इंटरफेस को प्रस्तुत किया जाता है। हालांकि, एक डाटा भंडार को संशोधित करना ज़रूर ग्रे बॉक्स के अन्तर्गत आता है, चूंकि आम तौर पर उपयोगकर्ता परीक्षण के तहत सिस्टम के बाहर डाटा बदलने में सक्षम नहीं होगा। ग्रे बॉक्स परीक्षण में रिवर्स इंजीनियरिंग भी शामिल हो सकती है, उदाहरण के लिए, बाउंडरी वैल्यू या त्रुटि संदेश निर्धारित करने के लिए।\n\nपरीक्षणों को अक्सर, सॉफ्टवेयर विकास प्रक्रिया में उनके शामिल होने की जगह के आधार पर वर्गीकृत किया जाता है, या परीक्षण की विशिष्टता के स्तर द्वारा।\n\nयूनिट परीक्षण उन परीक्षणों को संदर्भित करता है, जो कोड के एक विशेष खंड की कार्यशीलता, आम तौर पर प्रक्रिया स्तर पर, सत्यापित करते हैं। एक ऑब्जेक्ट-उन्मुख परिवेश में, यह अक्सर श्रेणी स्तर पर होता है और न्यूनतम इकाई परीक्षण में शामिल होता है कंस्ट्रक्टर और डिस्ट्रक्टर।\n\nइस प्रकार के परीक्षण आम तौर पर डेवलपर्स द्वारा लिखे जाते हैं, जब वे कोड पर काम कर रहे होते हैं (व्हाइट बॉक्स शैली), यह सुनिश्चित करने के लिए कि एक विशेष प्रक्रिया अपेक्षानुरूप ठीक ढंग से काम कर रही है। कोड में कॉर्नर केसेस या अन्य शाखाओं को पकड़ने के लिए, एक प्रक्रिया में कई परीक्षण हो सकते हैं। यूनिट परीक्षण अकेले, सॉफ्टवेयर के एक अंश की कार्यक्षमता को सत्यापित नहीं कर सकती, बल्कि इसका प्रयोग यह सुनिश्चित करने के लिए होता है कि सॉफ्टवेयर द्वारा प्रयुक्त बिल्डिंग ब्लॉक, एक दूसरे से स्वतंत्र रूप से कार्य करते हैं।\n\nइंटीग्रेशन परीक्षण किसी भी प्रकार का सॉफ्टवेयर परीक्षण है, जो एक सॉफ्टवेयर डिजाइन के प्रति घटकों के बीच इंटरफेस को सत्यापित करने का प्रयास करता है। सॉफ्टवेयर घटक को, पुनरावृत्तीय तरीक़े से या एक साथ (\"बिग बैंग\") एकीकृत किया जा सकता है। आम तौर पर पहले वाले तरीक़े को एक बेहतर अभ्यास माना जाता है, चूंकि यह इंटरफ़ेस मुद्दों को त्वरित रूप से स्थानीय होने और ठीक होने की अनुमति देता है।\n\nइंटीग्रेशन परीक्षण, इंटरफेस में त्रुटियाँ उजागर करने और एकीकृत घटक (मॉड्यूल) के बीच पारस्परिक क्रिया को दर्शाने के लिए काम करता है। उत्तरोत्तर, आर्कीटेक्चरल डिजाइन के तत्वों के अनुरूप जांचे गए सॉफ्टवेयर घटकों के बड़े समूहों को एकीकृत और तब तक जांचा जाता है, जब तक सॉफ्टवेयर एक सिस्टम के रूप में काम ना करने लगे।\n\nसिस्टम परीक्षण यह सत्यापित करने के लिए एक पूरी तरह से एकीकृत सिस्टम का परीक्षण करता है कि वह अपनी आवश्यकताओं को पूरा करता है।\n\nसिस्टम इंटीग्रेशन परीक्षण यह पुष्टि करता है कि एक सिस्टम, सिस्टम आवश्यकताओं में परिभाषित किसी भी बाहरी या अन्य पक्ष के सिस्टम से एकीकृत है। \n\nरिग्रेशन परीक्षण एक प्रमुख कोड परिवर्तन के बाद दोषों को खोजने पर ध्यान केंद्रित करता है। विशेष रूप से, यह सॉफ्टवेयर प्रतिगमन को या पुराने बग जो वापस आ गए हैं, उन्हें उजागर करने का प्रयास करता है। जब भी सॉफ्टवेयर प्रक्रिया, जो पहले सही ढंग से काम कर रही थी और अब अपेक्षानुसार कार्य करना बंद कर दे, तब ऐसे प्रतिगमन घटित होते हैं। विशिष्ट रूप से, प्रतिगमन, प्रोग्राम परिवर्तन के एक अनपेक्षित परिणाम के रूप में घटित होते हैं, जब सॉफ्टवेयर का नव विकसित हिस्सा, पहले से मौजूद कोड के साथ टकराता है। रिग्रेशन परीक्षण के आम तरीकों में शामिल है, पहले चलाए गए परीक्षण को फिर से चलाना और जांच करना कि पहले ठीक की गई खराबियाँ कहीं फिर से उभर तो नहीं आई हैं। परीक्षण की गहराई, जारी प्रक्रिया में चरण पर निर्भर करती है और अतिरिक्त विशेषताओं के जोखिम पर. वे या तो पूर्ण हो सकते हैं, रिलीज़ में काफी देर से जोड़े गए परिवर्तनों के लिए या फिर जोखिम भरे, बहुत उथले तक, प्रत्येक सुविधा पर सकारात्मक परीक्षण से बने हुए, अगर बदलाव, रिलीज में जल्दी हो रहे हैं या कम जोखिम वाले समझे जाते हैं।\n\nएक्सेपटेंस परीक्षण का तात्पर्य दो में से एक से हो सकता है:\n\n\n\"अल्फा परीक्षण\", संभावित उपयोगकर्ताओं/ग्राहकों या डेवलपर की साइट पर एक स्वतंत्र टेस्ट टीम द्वारा नकली या वास्तविक संचालन परीक्षण है। सॉफ्टवेयर के बीटा परीक्षण में जाने से पहले, अल्फा परीक्षण को अक्सर ऑफ़-द-शेल्फ सॉफ्टवेयर के लिए आंतरिक स्वीकृति परीक्षण के एक रूप में प्रयोग किया जाता है। \n\n\"बीटा परीक्षण\" अल्फा परीक्षण के बाद आता है। बीटा संस्करण के नाम से विख्यात सॉफ्टवेयर का संस्करण, प्रोग्रामिंग टीम से बाहर एक सीमित ग्राहकों के लिए जारी किया गया। सॉफ्टवेयर को लोगों के समूहों के लिए जारी किया जाता है, ताकि आगे के परीक्षण यह सुनिश्चित कर सकें कि उत्पाद में न्यूनतम खराबियाँ या बग हैं। कभी-कभी, बीटा संस्करण को भावी उपयोगकर्ताओं की अधिकतम संख्या को प्रतिक्रिया के क्षेत्र को बढाने के लिए, खुली जनता के लिए उपलब्ध कराया जाता है। \n\nसॉफ्टवेयर के ग़ैर-कार्यात्मक पहलुओं के परीक्षण के लिए विशेष तरीक़े मौजूद हैं। कार्यात्मक परीक्षण के विपरीत, जो सॉफ़्टवेयर के सही संचालन को स्थापित करता है (सही इस मायने में कि यह डिजाइन आवश्यकताओं में परिभाषित अपेक्षित व्यवहार से मेल खाता है), ग़ैर-कार्यात्मक परीक्षण इस बात की पुष्टि करता है कि सॉफ्टवेयर तब भी ठीक ढंग से कार्य करता है, जब इसे अवैध या अप्रत्याशित इनपुट प्राप्त होती है। सॉफ्टवेयर फॉल्ट इंजेक्शन, फजिंग के रूप में, एक ग़ैर-कार्यात्मक परीक्षण का उदाहरण है। ग़ैर-कार्यात्मक परीक्षण, विशेष रूप से सॉफ्टवेयर की खातिर, यह स्थापित करने के लिए डिज़ाइन किया गया है कि परीक्षण के अन्तर्गत रचना, अवैध या अनपेक्षित इनपुट को सहन कर सकती है या नहीं और इस प्रकार वे इनपुट वैलीडेशन रूटीन और साथ ही साथ एरर-हैंडलिंग रूटीन की मजबूती को स्थापित कर सकेंगे। विभिन्न वाणिज्यिक ग़ैर-कार्यात्मक परीक्षण उपकरण, सॉफ्टवेयर फॉल्ट इंजेक्शन पृष्ठ से जुड़े होते हैं; कई खुले स्रोत के और मुफ्त सॉफ्टवेयर उपकरण उपलब्ध हैं, जो ग़ैर-कार्यात्मक परीक्षण करते हैं।\n\nपरफोर्मेंस परीक्षण, या लोड परीक्षण यह देखने के लिए जांच करता है कि सॉफ्टवेयर, बड़ी मात्रा में डाटा या उपयोगकर्ताओं को संभाल सकता है या नहीं। आम तौर पर इसे सॉफ्टवेयर स्केलेबिलिटी के रूप में जाना जाता है। ग़ैर-कार्यात्मक सॉफ्टवेयर परीक्षण की यह गतिविधि अक्सर क्षमता परीक्षा के रूप में जानी जाती है।\n\nस्थाईत्व परीक्षण यह देखने के लिए जांच करता है कि सॉफ्टवेयर एक स्वीकार्य अवधि में या उससे ऊपर, लगातार अच्छी तरह से कार्य करता सकता है या नहीं। ग़ैर-कार्यात्मक सॉफ्टवेयर परीक्षण की यह गतिविधि अक्सर लोड (या एंड्युरेंस) परीक्षण के रूप में निर्दिष्ट होती है।\n\nप्रयोज्यता परीक्षण की जरूरत यह जांचने के लिए होती है कि यूज़र इंटरफ़ेस का उपयोग करना और उसे समझना आसान है या नहीं।\n\nसुरक्षा परीक्षण उस सॉफ्टवेयर के लिए जरूरी है जो हैकर्स द्वारा सिस्टम घुसपैठ को रोकने के लिए गोपनीय डाटा को परिष्कृत करता है।\n\nअन्तर्राष्ट्रीयकरण और स्थानीयकरण की जरूरत सॉफ्टवेयर के इन पहलुओं की जांच के लिए होती है, जिसके लिए एक छद्मस्थानीयकरण विधि का इस्तेमाल किया जा सकता है। यह इस बात की पुष्टि करेगा कि अनुप्रयोग, एक नई भाषा में अनुवाद किए जाने या एक नई संस्कृति के लिए अनुकूलित किये जाने के बाद भी (जैसे विभिन्न मुद्राएं या समय क्षेत्र) काम करता है।\n\nविनाशक परीक्षण, सॉफ्टवेयर या उप-प्रणाली को इसकी मजबूती के जांच के लिए, विफल करने का प्रयास करती है।\n\nसॉफ्टवेयर परीक्षण के एक आम तरीके को, इसे ग्राहक को भेजे जाने से पहले और इसकी कार्यक्षमता विकसित किये जाने के बाद, परीक्षकों के एक स्वतंत्र समूह द्वारा सम्पादित किया जाता है। इस अभ्यास के परिणामस्वरूप अक्सर परीक्षण चरण का, परियोजना में हुई देरी की क्षतिपूर्ति के लिए परियोजना बफर के रूप में उपयोग किया जाता है और इस प्रकार से परीक्षण के लिए समर्पित समय के साथ समझौता होता है। एक और परिपाटी है परियोजना के शुरू होने के क्षण ही सॉफ्टवेयर परीक्षण को शुरू कर देना और परियोजना के समापन तक यह एक सतत प्रक्रिया है।\n\nजवाब में, कुछ ऐसे उभरते सॉफ्टवेयर विषय जैसे एक्सट्रीम प्रोग्रामिंग और एजाइल सॉफ्टवेयर डिवेलपमेंट आंदोलन, एक \"टेस्ट ड्रिवेन सॉफ्टवेयर डेवेलपमेंट\" मॉडल का पालन करते हैं। इस प्रक्रिया में, सॉफ्टवेयर इंजीनियर द्वारा यूनिट टेस्ट पहले लिखे जाते हैं, (अक्सर एक्सट्रीम प्रोग्रामिंग पद्धति में पेयर प्रोग्रामिंग के साथ). बेशक ये परीक्षण शुरू में विफल हो जाते हैं; जैसे कि उनसे उम्मीद रहती है। और फिर जैसे ही कोड लिखा जाता है यह परीक्षण स्वीट के बड़े अंश के संवर्द्धित रूप से गुजरता है। टेस्ट स्वीट को, विफलता की नई परिस्थितियों और कॉर्नर केस के मिलते रहने के कारण, लगातार नवीनीकृत किया जाता है और उन्हें किसी भी विकसित रिग्रेशन टेस्ट के साथ एकीकृत किया जाता है। बाकी सॉफ्टवेयर सोर्स कोड के साथ यूनिट टेस्ट को बनाए रखा जाता है और आम तौर पर बिल्ड प्रक्रिया में एकीकृत किया जाता है (जहाँ अन्तर्जात पारस्परिक क्रिया परीक्षण को आंशिक रूप से मानव निर्मित स्वीकृति प्रक्रिया में बदल दिया जाता है)।\n\nहालांकि संगठनों के बीच भिन्नता मौजूद है, परीक्षण के लिए एक विशिष्ट चक्र होता है। निम्न नमूना, वॉटर फॉल डेवलपमेंट मॉडल को अपनाने वाले संगठनों के बीच आम है।\n\n\nकई प्रोग्रामिंग समूह, स्वचालित परीक्षण पर अधिकाधिक निर्भर कर रहे हैं, विशेष रूप से ऐसे समूह जो\nटेस्ट चालित विकास का उपयोग करते हैं। टेस्ट लिखने के कई फ्रेमवर्क हैं और सतत एकीकरण सॉफ्टवेयर, परीक्षण को स्वतः चलाएगा, जब हर बार कोड एक वर्ज़न कंट्रोल सिस्टम में परखा जाएगा।\n\nजबकि स्वचालन वह सब कुछ निर्मित नहीं कर सकता, जो कि एक मानव कर सकता है (और वे अजीब तरीके, जिसे वे ऐसा करने की खातिर अपनाते हैं), यह रिग्रेशन परीक्षण के लिए बहुत उपयोगी हो सकते हैं। तथापि, वास्तव में उपयोगी होने के लिए, इसमें स्क्रिप्ट परीक्षण की एक पूर्ण विकसित टेस्ट स्वीट की आवश्यकता होती है।\n\nप्रोग्राम परीक्षण और गड़बड़ी का पता लगाने में परीक्षण उपकरण और डिबगर द्वारा काफी सहायता प्राप्त हो सकती है। \nपरीक्षण/डिबग उपकरणों की विशेषताओं में शामिल हैं:\n\n\nइन गुणों में से कुछ को एक एकीकृत विकास परिवेश (IDE) में शामिल किया जा सकता है।\n\nआम तौर पर, जिन विषयों तक गुणवत्ता सीमित होती है, वे हैं शुद्धता, संपूर्णता, सुरक्षा, लेकिन ISO मानक ISO 9126 के तहत वर्णित अधिक तकनीकी आवश्यकताएं भी शामिल हो सकती हैं, जैसे क्षमता, विश्वसनीयता, दक्षता, सुवाह्यता, रख-रखाव, संगतता और 0}प्रयोज्यता।\n\nकई आम सॉफ्टवेयर उपाय मौजूद हैं, जिन्हें अक्सर 'मैट्रिक्स' कहा जाता है, जिनका प्रयोग सॉफ्टवेयर की हालत या परीक्षण की पर्याप्तता के मापन के लिए किया जाता है।\n\nसॉफ्टवेयर परीक्षण प्रक्रिया कई आर्टीफैक्ट को उत्पन्न कर सकती है।\n\n\n\n\n\n\n\n\nसॉफ्टवेयर परीक्षकों और गुणवत्ता आश्वासन विशेषज्ञों की पेशेवर आकांक्षाओं को बल देने के लिए कई प्रमाणन कार्यक्रम मौजूद हैं। वर्तमान में प्रदान किये जाने वाले प्रमाणन में ऐसा कोई नहीं है, जिसमें वास्तव में आवेदक के लिए सॉफ्टवेयर परीक्षण की क्षमता को प्रदर्शित करने की आवश्यकता होती है। कोई भी प्रमाणीकरण, व्यापक रूप से स्वीकृत ज्ञान के ढांचे पर आधारित नहीं है। इस तथ्य ने कुछ लोगों को यह कहने के लिए प्रेरित किया कि परीक्षण क्षेत्र अभी प्रमाणन के लिए तैयार नहीं है। अकेले प्रमाणन एक व्यक्ति की उत्पादकता, उनके कौशल, या व्यावहारिक ज्ञान को माप नहीं सकता और एक परीक्षक के रूप में उनकी क्षमता, या पेशेवराना शैली की गारंटी नहीं दे सकता.\n\n\n\n\nकुछ प्रमुख सॉफ्टवेयर परीक्षण विवादों में शामिल हैं:\n\n\n\n\n\n\n\n\n", "id": "181762", "title": "सॉफ्टवेयर परीक्षण"}
{"url": "https://hi.wikipedia.org/wiki?curid=181781", "text": "राजेन्द्र कृषि विश्वविद्यालय, पूसा\n\nराजेन्द्र कृषि विश्वविद्यालय, भारत के बिहार राज्य के समस्तीपुर जिले के पूसा बाजार के निकट स्थित है। यह भारत के २६ कृषि विश्वविद्यालयों में से एक है। जुलाई २०१४ में इसे केंद्रीय विश्वविद्यालय बनाने का निर्णय हुआ। मूल रूप में यह संस्थान 'इम्पीरियल कृषि अनुसंधान संस्थान' (Imperial Agriculture Research Institute) था जो ब्रिटिश काल में सन् १९०३ में स्थापित किया गया था। सन् १९३४ में बिहार में एक भयंकर भूकंप आया जिसमें इस संस्थान के मुख्य भवनों को काफी क्षति हुई। इसके परिणामस्वरूप उसी वर्ष इस संस्थान को नयी दिल्ली स्थानान्तरित कर दिया गया जिसे 'पूसा कैम्प्स' कहा गया। आगे चलकर दिल्ली स्थित यह संस्थान का नाम भारतीय कृषि अनुसंधान संस्थान (Indian Agricultural Research Institute) कर दिया गया और पूसा में जो कुछ बचा रहा उसे पदावनत (downgrade) करके 'कृषि अनुसंधान स्टेशन' (agricultural research station) कहा जाने लगा। अन्तत: ३ दिसम्बर सन् १९७० को भारत सरकार ने इसी को नामान्तरित करके 'राजेन्द्र कृषि विश्वविद्यालय' के रूप में बदल दिया।\n\nइस विश्वविद्यालय में पांच संकाय (faculties) हैं - कृषि, पशुचिकित्सा, कृषि इंजीनियरी, मूलभूत विज्ञान तथा मानविकी एवं गृह विज्ञान। इसके अलावा कृषि महाविद्यालय, मत्स्य महाविद्यालय तथा दुग्ध प्रौद्योगिकी महाविद्यालय भी हैं। यह विश्वविद्यालय ६ पूर्व-स्नातक पाठ्यक्रम, ३३ परा-स्नातक कार्यक्रम तथा १८ पीएचडी कार्यक्रम संचालित करता है। भारत का यह एकमात्र विश्वविद्यालय है जो कृषि-व्यवसाय (Agribusiness) में एमबीए की डिग्री प्रदान करता है।\n\n", "id": "181781", "title": "राजेन्द्र कृषि विश्वविद्यालय, पूसा"}
{"url": "https://hi.wikipedia.org/wiki?curid=181783", "text": "धर्मनिरपेक्ष राज्य\n\nएक धर्मनिरपेक्ष राज्य धर्मनिरपेक्षता की एक अवधारणा है, जिसके तहत एक राज्य या देश स्वयं को धार्मिक मामलों में आधिकारिक तौर पर, न धर्म और न ही अधर्म का समर्थन करते हुए, तटस्थ घोषित करता है। परंतु भारतीय वाङ्मय में धर्म शब्द का अर्थ अत्यंत व्यापक है। कर्तव्य, आचारसंहिता, नियम, रीति, रस्म, सांप्रदायिक आचार विचार, नैतिक आचरण, शिष्टाचार आदि का समावेश एक शब्द \"धर्म\" में ही हो जाता है। धर्म का अर्थ जीवनप्रणाली भी माना गया है। सेक्युलर शब्द का हिंदी अनुवाद करना दुष्कर प्रतीत होता है, तथापि उसके लिए कोई शब्द रखना अत्यावश्यक है।\n\nसेक्युलर शब्द का कुछ मिलता-जुलता या अनुवाद \"लौकिक\" हो सकता है। सेक्युलर के लिए लौकिक शब्द हिंदी में प्रचलित है। वास्तव में सेक्युलर शब्द के लिए हिंदी में अभी कोई उपयुक्त शब्द नहीं निकल पाया है। कालांतर में शब्द अपना रूप तथा भाव पकड़ लेते हैं। अतएव धर्मनिरपेक्ष तथा लौकिक शब्द का प्रयोग सेक्युलर के लिए यहाँ किया गया है।\n\nधर्मनिरपेक्षता, पंथनिरपेक्षता या सेक्युलरवाद (secularism) एक आधुनिक राजनैतिक एवं संविधानी सिद्धान्त है। धर्मनिरपेक्षता के मूलत: दो प्रस्ताव [1] है 1) राज्य के संचालन एवं नीति-निर्धारण में मजहब (रेलिजन) का हस्तक्षेप नही होनी चाहिये। 2) सभी धर्म के लोग कानून, संविधान एवं सरकारी नीति के आगे समान है\n\nधर्मनिरपेक्ष किंवा लौकिक राज्य में ऐसे राज्य की कल्पना की गई हैं, जो सभी धर्मों तथा संप्रदायों का समान आदर करता है। सबको एक समान फलने और फूलने का अवसर प्रदान करता है। राज्य किसी धर्म अथवा संप्रदायविशेष का पक्षपात नहीं करता। वह किसी धर्मविशेष को राज्य का धर्म नहीं घोषित करता। प्राय: विश्व के सभी मुसलिम राज्यों ने अपने आपको इस्लामिक राज्य घोषित किया है। बर्मा ने अपना राजधर्म बौद्धधर्म घोषित किया है।\n\nकिसी देश में प्राय: किसी धर्मविशेष के माननेवालों का बहुमत रहता है। हिंदुस्तान में हिंदू, पाकिस्तान में मुसलमान, इसरायल में यहूदी, बर्मा, श्रीलंका, स्याम आदि में बौद्ध बहुसंख्यक हैं। इसी तरह ब्रिटेन, यूरोप उत्तरी और दक्षिण अमरीका, आस्ट्रेलिया आदि में ईसाई धर्म के अनुयायियों का बहुमत है। बहुमत के कारण वहाँ के सांस्कृतिक वातावरण में, वहाँ के धर्म की छाप लगना स्वाभाविक है। किंतु कोई भी राज्य, राज्य के रूप में, किसी धर्मविशेष से अलग रह सकता है। भारत का वर्तमान संविधान तथा लोकतंत्रीय प्रणाली इसके ज्वलंत उदाहरण है।\n\nब्रिटेन जैसे देश में वहाँ के संविधान के अनुसार राज्य का एक धर्मविशेष से संबंध है। वह ईसाई धर्म के एक संप्रदाय \"चर्च ऑव इंग्लैंड से\" संबंधित है। फिर भी वहाँ के लोग धर्मनिरपेक्ष भाव से अपना लोकतंत्र तथा शासन चलाते हैं।\n\nसहिष्णुता धर्मनिरपेक्ष राज्य की आधारशिला है। भारत सनातन काल से धार्मिक विषयों में सहनशीलता, उदारता, उदात्त विचार एवं नीति का आश्रय लेता आया है। यह धर्मनिरपेक्ष राज्य का एक पहलू कहा जा सकता है। उसका उसे संपूर्ण रूप नहीं कह सकते। इसके विपरीत सोचने पर देश की राष्ट्रीयता के स्थान पर धर्मविशेष की राष्ट्रीयता, यथा हिंदू राष्ट्रीयता, मुसलिम राष्ट्रीयता, सिख राष्ट्रीयता, किंवा बौद्ध राष्ट्रीयता का विचार करना पड़ेगा। ऐसी स्थिति में भारतीय राष्ट्रीयता, जर्मन राष्ट्रीयता, अमरीकन राष्ट्रीयता केवल नाम मात्र की चीजें रह जाएँगी।\n\nसंकीर्ण राष्ट्रीयता पुराने जमाने की बातें हो गई हैं। उनका मेल आधुनिक जगत् से नहीं खाता। वे पिछड़े और पुराने जमाने के नक्शे कहे जाएँगे।\n\nयह धारणा कि धर्मनिरपेक्ष राज्य का सिद्धांत धर्म के विरुद्ध है, गलत है। इसका यह भी अर्थ नहीं है कि धर्मनिरपेक्ष राज्य के निवासी धर्म के प्रति उदासीन हो जाएँ, अथवा उसे त्याग दें। उसका सरल अर्थ यह है कि धर्म को दैनिक सामाजिक, राजनीतिक तथा शासकीय जीवनस्तर से पृथक् रखें। धर्म एवं राजनीति को एक में न मिलाकर, उन्हें एक दूसरे का विरोधी न मानकर एक दूसरे का पूरक मानें।\n\n19वीं शताब्दी में होली ओक ने इस प्रसंग में बहुत कुछ लिखा है। वे लौकिक आंदोलन के प्रवर्तक थे। उनकी पुस्तक \"ओरिजिन ऐंड नेचर ऑव सिक्युलरिज्म\" विश्व के किसी पुस्तकालय में प्राप्य नहीं है। उनकी अन्य पुस्तकें तथ लेख मिलते हैं। उनके आधार पर उनके विचारों के विषय में विनिश्चित किया जा सकता है। ईसाई समाज के एक वर्ग ने उनके सिद्धांतों को धर्मविरोधी माना था। उनकी बहुत सी पुस्तकें असहिष्णुता की वेदी पर धर्मप्राण ईसाइयों द्वारा फूंक दी गई थीं।\n\nउन्होंने सर्वप्रथम सन् 1846 ई. में लौकिक विचारधारा को जगत् के सम्मुख रखा। इसी समय कार्ल मार्क्स ने सन् 1848 ई. के घोषणपत्र निकालकर समाजवादी विचार विश्व को दिया। एक ही काल में, एक ही देशस्थान से दो विचारधाराएँ विश्व के सम्मुख आई। रूस ने समाजवादी विचारधारा का यदि सफल प्रयोग करने का प्रयास किया तो भारत में सेक्युलर सिद्धांत का अभिनव प्रयोग किया जा रहा है।\n\nश्री ओक ने सन् 1860 में कहा था लौकिकवाद न तो धर्मशास्त्र की उपेक्षा करता है और न उसकी स्तुति करता है और न उसे अस्वीकार करता है। जहाँ लौकिककार का अर्थ अर्थशास्त्र के विरोधी अर्थ में किया जाता है वहीं लौकिक शब्द लौकिकवाद से भिन्न अर्थ रखता है।\n\nधर्मनिरपेक्ष राज्य को जो लोग धर्मविरोधी मानते हैं उनका उत्तर देते हुए होली ओक कहता है- \"लौकिकता गणितशास्त्र तुल्य ईश्वरवाद तथा अन्य बातों से सर्वथा अलग और मुक्त है। ज्यामिति के अन्वेषक युकिलड ने अपने समय के परमेश्वर तथा तत्संबंधी भावनाओं की उपेक्षा नहीं की। ज्यामिति में भगवान की सत्ता को स्वीकार करना आवश्यक नहीं था। उसने रेखागणित में भगवान की सत्ता का कहीं वर्णन भी नहीं किया है। अतएव ईश्वर संबंधी विचारों पर बिना मत प्रगट किए लौकिकता गणितशास्त्र तुल्य स्वतंत्र \"अध्ययन का विषय हो सकती है।\"\n\nश्री ओक अंत में इसकी परिभाषा का सार इस प्रकार उपस्थित करते हैं- \"मानव की भलाई के लिए मानव प्रयोग द्वारा मानव बुद्धि द्वारा, जो भी बातें संमत हों जिन्हें इस जीवन में किया जा सकता है, जिनका संबंध इस जीवन से है वही लौकिकता है।\"\n\nअमरीका में लौकिक विचारधारा का उत्तरोत्तर विकास होता रहा है। धर्म तथा विचारस्वातंत्र्य को लेकर बहुत कुछ वादविवाद भी हो चुका है। सन् 1776 ई. के अधिकार घोषणापत्र में कहा गया है- \"विचारस्वातंत्र्य तथा धर्म अनुकरण के निमित्त प्रत्येक व्यक्ति मुक्त है।\" सन् 1868 में अमरीका के सुप्रीम कोर्ट ने रेनाल्ड बनाम अमरीका के संयुक्तराष्ट्र के मुकदमे में यह विचार स्पष्ट किया है- \"न तो संघ तथा न राज्य चर्च की स्थापना कर सकते हैं। न तो वे कही कानून बना सकते हैं कि एक धर्म की सहायता अथवा अनेक धर्मों की सहायता अथवा उनके स्थान पर दूसरों को प्राथमिकता दी जाए। किसी को कोई व्यक्ति चर्च जाने अथवा न जाने से रोक नहीं सकता। किसी संप्रदाय अथवा धर्म के निमित्त किसी प्रकार कर नहीं लगाया जा सकता।\"\n\nराष्ट्रपति अब्राहम लिंकन ने सन् 1863 में स्पष्ट कहा था- \"मैं इतना और कहना चाहता हूँ कि संयुक्त राष्ट्र अमरीका चर्चों को चलाने का कार्य न करे। यदि कोई नागरिक चर्च अथवा चर्च के बाहर खतरनाक साबित होता है तो उसे रोकना चाहिए।\"\n\nसंयुक्त राष्ट्र अमरीका के जस्टिस श्री स्टुलेज ने इमर्सन बनाम बोर्ड ऑव एजूकेशन के मुकदमे में निर्णय देते हुए कहा है- \"धार्मिक स्वतंत्रता की सबसे बड़ी शर्त यह है कि वह अपना अस्तित्व बिना किसी प्रकार के गुजारे के कायम रखे और साथ ही साथ वह राज्य के हस्तक्षेप से मुक्त रहे। राज्य तथा चर्च का पृथक्करण राज्य के लिए अच्छा है तथा चर्च के लिए अच्छा है।\"\n\nसंयुक्त राष्ट्र के समान समाजवादी सोवियत संघ में भी कुछ इस प्रकार की घटनाएँ घटी हैं। 1919 ई. में सोवियत के संविधान का अनुच्छेद 13, जो पुन: 1927 में स्वीकार किया गया था, स्पष्ट धर्मनिरपेक्ष किंवा लौकिक राज्य के सिद्धांत को घोषित करता है- \"परिश्रमशील जनता के विवेकपूर्ण वास्तविक स्वतंत्रताप्राप्ति निमित्त चर्च को राज्य से पृथक् तथा स्कूलों को भी चर्च से पृथक् किया जाता है। धार्मिक एवं धर्मविरोधी प्रचार की स्वतंत्रता समस्त नागरिकों के लिए स्वीकार की जाती है।\"\n\nसन् 1923 के चीन के गणतंत्रीय संविधान में लौकिक सिद्धांतों का समावेश किया गया है- \"चीनी गणतंत्र के नागरिक कानून के सम्मुख बिना किसी जाति अथवा धर्म अथवा वर्गभेद के एक समान समझे जाएँगे।\" सितंबर सन् 1954 ई. में कम्युनिस्ट चीन सरकार ने संविधान का, जो प्रारूप स्वीकार किया, उसके अनुच्छेद 88 में स्पष्ट उल्लेख है- \"गणतंत्र की जनता को धार्मिक विश्वास की स्वतंत्रता प्राप्त है।\"\n\nभारत में महात्मा गांधी ने राज्य तथा धर्म को एक दूसरे में मिला देने की कल्पना नहीं की, जैसी कि मुस्लिम लीग के नेतागण ने की थी। लीग ने जाति, धर्म, संस्कृति और राजनीति को एक में मिलाकर उलझन पैदा कर दी जिसके कारण भारत का विभाजन हुआ। पाकिस्तान धार्मिक राज्य घोषित किया गया। महात्मा गांधी ने इस ओर संकेत किया था- \"धर्म तथा राजनीति दो चीजें हैं, एक दूसरे को अनजाने मिलाने में उलझन और अलग रखने में जीवन सरल तथा सुंदर होता है।\n\nभारतीय संविधान सभा ने विश्व के सम्मुख संविधान की जो प्रस्तावना रखी गई वह धर्मनिरपेक्ष राज्य के मौलिक सिद्धांतों के मत पर आधारित थी।\n\nसंविधान के अनुच्छेद 29 पर बोलते हुए लोकसभा के भूतपूर्व अध्यक्ष श्री अनंतशयनम् आयंगर ने कहा था- \"हम वचनबद्ध हैं कि हमारा राज्य धर्मनिरपेक्ष होगा। शब्द धर्मनिरपेक्ष से हमारा यह अभिप्राय नहीं है कि हम किसी धर्म में विश्वास नहीं रखते और हमारे दैनिक जीवन में इससे कोई संबंध नहीं है। इसका केवल अर्थ यह है कि राज्य सरकार किसी मजहब को दूसरे की तुलना में न तो सहायता दे सकती है और न प्राथमिकता। इसलिए राज्य अपनी पूर्ण निरपेक्ष स्थिति रखने को विवश है।\"\n\nश्री जवाहरलाल नेहरु ने 5 अगसत, सन् 1954 के भाषण में इसका और स्पष्टीकरण करते हुए कहा था \"हम अपने राज्य को शायद धर्मनिरपेक्ष कहते हैं। शायद \"सेक्युलर\" शब्द के लिए धर्मनिरपेक्ष शब्द बहुत अच्छा नहीं है। फिर भी इससे बेहतर शब्द न मिलने के कारण इसका प्रयोग किय गया है। इसका अर्थ है धार्मिक स्वतंत्रता, अपनी अंतरात्मा की प्रेरणा के अनुसार कार्य करने की स्वतंत्रता। इसमें उन लोगों की भी स्वतंत्रता सम्मिलित है जो किसी धर्म को नहीं मानते। स्पष्टत: इसका यह मतलब नहीं है कि यह एक ऐसा राज्य है जहाँ पर धर्मपालन को निरुत्साहित किया जाता है। इसका मतलब है कि प्रत्येक धर्म के अनुयायियों को धर्मपालन की पूरी स्वतंत्रता है, बशर्ते वे दूसरे के धर्म में या हमारे राज्य के मूल सिद्धांतों में हस्तक्षेप न करें। इसका मतलब है कि धर्म की दृष्टि से जो अल्पसंख्यक हैं वे इस स्थिति को स्वीकार करें। इसका यह भी तात्पर्य है कि बहुसंख्यक लोग इस दृष्टिकोण से इसका पूरी तरह से महत्व समझें, क्योंकि बहुसंख्यक होने के नाते और दूसरे कारणों से भी उनका प्रभाव अधिक है। अत: उनकी जिम्मेदरी हो जाती है किसी भी रूप में अपनी स्थिति का इस तरह से प्रयोग न करें जिससे हमारे धर्मनिरपेक्ष सिद्धांतों के पालन में बाधा पहुँचे।\n\n\"धर्मनिरपेक्ष\" शब्द का एक और भी अर्थ समझा जा सकता हूँ, हालांकि यह शब्दकोश में दिया हुआ अर्थ नहीं हो सकता। मैं इसे सामजिक और राजनीतिक समानता के अर्थ का द्योतक भी मानता हूँ। इस प्रकार ऐसे समाज को जिसमें जातपांत का भेदभाव हो, सही रूप में धर्मनिरपेक्ष नहीं कहा जा सकता। किसी भी व्यक्ति के विश्वास में हस्तक्षेप करना अभीष्ट नहीं है, लेकिन जब वे विश्वास जातपाँत का भेदभाव पैदा करते हैं तो निस्संदेह इनका प्रभाव सामाजिक ढाँचे पर पड़ता है। इससे हमारे समानता के सिद्धांत की प्राप्ति और सफलता में बाधा पड़ती है। सांप्रदायिकता की तरह इससे राजनीतिक मामलों में भी अड़चन पड़ती है।\"\n\nभारतीय संविधान की प्रस्तावना तथ द्वितीय भाग के अनुच्छेद, 5, तृतीय भाग के अनुच्छेद 15, 16, 21, 25, 28, 30 में धर्मनिरपेक्ष सिद्धांतों समाविष्ट किय गया है।\n\n", "id": "181783", "title": "धर्मनिरपेक्ष राज्य"}
{"url": "https://hi.wikipedia.org/wiki?curid=181785", "text": "यूरोपीय धर्मसुधार\n\n16वीं शताब्दी के प्रारंभ में समस्त पश्चिमी यूरोप धार्मिक दृष्टि से एक था - सभी ईसाई थे; सभी रोमन काथलिक चर्च के सदस्य थे; उसकी परंपरगत शिक्षा मानते थे और धार्मिक मामलों में उसके अध्यक्ष अर्थात् रोम के पोप का शासन स्वीकार करते थे। यूरोपीय धर्मसुधार अथवा रिफॉरमेशन 16वीं शताब्दी के उस महान आंदोलन को कहते हैं जिसके फलस्वरूप पाश्चात्य ईसाइयों की यह एकता छिन्न-भिन्न हुई और प्रोटेस्टैंट धर्म का उदय हुआ। चर्च के इतिहस में समय-समय पर सुधारवादी आंदोलन होते रहे किंतु वे चर्च के धार्मिक सिद्धातों अथवा उसके शासकों को चुनौती न देकर उनके निर्देश के अनुसार ही नैतिक बुराइयों का उन्मूलन तथा धार्मिक शिक्षा का प्रचार अपना उद्देश्य मानते थे। 16वीं शताब्दी में जो सुधार का आंदोलन प्रवर्तित हुआ वह शीघ्र ही चर्च की परंपरागत शिक्षा और उसके शासकों के अधिकार, दोनों का विरोध करने लगा।\n\nधर्मसुधार आंदोलन के परिणामस्वरूप यूरोप में कैथोलिक सम्प्रदाय के साथ-साथ लूथर सम्प्रदाय, कैल्विन सम्प्रदाय, एंग्लिकन सम्प्रदाय और प्रेसबिटेरियन संप्रदाय प्रचलित हो गये।\n\nधर्मसुधार का यह नवीन स्वरूप समझने के लिए यूरोप की तत्कालीन परिस्थिति पर विचार करना अत्यंत आवश्यक है।\n\nईसा द्वारा प्रवर्तित काथलिक चर्च के प्रति ईसाइयों में जो श्रद्धा का भाव शताब्दियों से चला आ रहा था वह कई कारणों से कम हो गया था। 14वीं शताब्दी में एक फ्रांसीसी पोप का चुनाव हुआ था, जो जीवन भर फ्रांस में ही रहे। इसके फलस्वरूप बाद में 40 वर्ष तक दो पोप विद्यमान थे, एक फ्रांस में और एक रोम में, जिससे समस्त काथलिक संसार दो भागों में विभक्त रहा। आठवीं शताब्दी में फ्रैंक जाति के काथलिक राजा ने इटली पर आक्रमण करने वाली लोंवार्ड सेना को हराकर इटली का मध्य भाग पोप के अधिकार में दे दिया और इस प्रकार रोमन काथलिक चर्च के परमाधिकारी धर्मगुरु के अतिरिक्त एक साधारण शासक भी बन गए। इस कारण जर्मनी और फ्रांस के राजा सहज ही चर्च के मामलों में और विशेषकर पोप के चुनाव में हस्तक्षेप करने का प्रयास करते रहे। 14वीं शताब्दी के उत्तरार्ध में यह चुनाव इटली के अभिजात वर्ग की प्रतियोगिता का मैदान बन गया था जिससे व्यक्ति की योग्यता पर कम, उसके वंश पर अधिक ध्यान दिया जाने लगा। इसका नतीजा यह हुआ कि उस समय नितांत अयोग्य पोपों का चुनाव हुआ और रोम के दरबार में नैतिकता तथा धर्म की उपेक्षा होने लगी। अत: रोम के चर्च के प्रति श्रद्धा का घट जाना नितांत स्वाभाविक था। असंतोष का एक और कारण यह था कि समस्त चर्च की संस्थाओं पर उनकी संपत्ति के अनुसार कर लगाया जाता था और रोम के प्रतिनिधि सर्वदा घूमकर यह रुपया वसूल करते थे।\n\nचर्च के केंद्रीय संगठन की इस दुर्दशा के अतिरिक्त विभिन्न धर्मप्रांतों की परिस्थिति भी संतोषजनक नहीं थी। इस समय समस्त पश्चिमी यूरोप लगभग सात सौ धर्मप्रांतों में विभक्त था। उनके शासक बिशप कहलाते थे। ये बिशप सामंत थे जो राजा द्वारा प्राय: अभिजात वर्ग में से चुने जाते थे, दरबार के सदस्य थे और जर्मनी में बहुधा अपने क्षेत्र के राजनीतिक शासक भी थे। अत: बहुत से बिशप राजनीति में अधिक, धर्म में कम रुचि लेते थे और अपने धर्मप्रदेश का धार्मिक प्रशासन विश्वविद्यालय के उच्च अधिकार प्राप्त पुरोहितों के हाथ में छोड़ देते थे। गाँवों में बसनेवाले अधिकांश साधारण पुरोहित अर्धशिक्षित थे। प्रवचन देने में असमर्थ थे और प्राय: गरीब भी थे। साधारण पुरोहितों की यह दयनीय दशा 16वीं शताब्दी के यूरोपीय काथलिक चर्च की सब से बड़ी कमजोरी थी। भ्रमण करनेवाले फ्रांसिस्को आदि धर्मसंधियों के अतिरिक्त जनसाधारण को (जो दो तिहाई निरक्षर था) धार्मिक शिक्षा देनेवाला कोई नहीं था। इससे सर्वत्र अंधविश्वास फैल गया और कर्मकांड को अनावश्यक एवं असंतुलित महत्व दिय जाने लगा।\n\n13वीं शताब्दी में काथलिक धर्मविज्ञान (थिओलोजी) ने अरस्तू की ईसाई व्याख्या तथा स्कोलैस्टिक फिलोसोफी के सहारे धर्मसिद्धंातों का युक्तियुक्त प्रतिपादन किया था किंतु 15वीं शताब्दी में धर्म की मूलभूत समस्याओं पर से ध्यान और चिंतन हट गया था। विश्वविद्यालयों में धर्मपंडित गौण प्रश्नों के विषय में अपने मतभेदों को अधिक महत्व देने लगे थे जिससे काथलिक धर्मविज्ञान इतन निष्प्राण हो गया था कि कुछ साधकों की यह धारणा दृढ़ हो गई थी कि धर्मविज्ञान साधना में बाधक है। इस प्रकार हम देखते हैं कि चर्च के सभी क्षेत्रों में सुधार की अपेक्षा थी और धर्मसुधार का आंदोलन अनिवार्य हो गया था। 14वीं शताब्दी में अँग़रेज विक्लिफ (ज़्न्र्ड़थ्त्ढढड्ढ) और बाद में बोहीमिया के न हुस जॉ (क्तद्वद्म) सिखलाने लगे थे कि चर्च का संगठन, उसके संस्कार आदि यह सब मनुष्यों का आविष्कार है; ईसाइयों के लिए बाइबिल ही पर्याप्त है। उस समय भी उन विचारों को अधिक सफलता नहीं मिली किंतु उनका लूथर पर प्रभाव स्पष्ट ही है। स्पेन में टोलीडो के आर्बबिशप सिमेनेस (1495-1517 ई.) ने चर्च के अनुशासन के अंदर धर्मसुधार आंदोलन प्रवर्तित किया जिससे वहाँ का वातावरण पूर्ण रूप में बदल गया किंतु पश्चिमी यूरोप में चर्च की परिस्थिति में कोई विशेष परिवर्तन नहीं हो पाया था।\n\nजब लूथर ने रोम के विरुद्ध आवाज उठाई उनको एक और कारण से अपूर्व सफलता मिली। यूरोप में उस समय सर्वत्र प्राचीन यूनानी तथ लैटिन साहित्य की लोकप्रियता के साथ साथ एक नवीन सांस्कृतिक आंदोलन प्रारंभ हुआ जिसे रिनेसाँ अथवा नवजागरण कहा गया है। इसके फलस्वरूप लोगों में व्यक्तिगत स्वतंत्रता का भाव उत्पन्न हुआ। मुद्रण के आविष्कार के कारण इसी समय से बाइबिल की मुद्रित प्रतियाँ अधिक सरलतापूर्वक सुलभ होने लगी थीं, जिससे लोगों को अपनी ओर से धर्म के विषय में सोचने और बाइबिल को अपनी निजी व्याख्या करने की प्रवृत्ति को भी प्रोत्साहन मिलने लगा था।\n\nयूरोपीय धर्मसुधार का ऐतिहासिक विकास इस प्रकार है : इसका आरंभ 1517 ई. में लूथर के विद्रोह से हुआ था। उन्होंने किन परिस्थितियों में अपना आंदोलन प्रवर्तित किया था और चर्च के किन परंपरागत सिद्धांतो का विरोध करके किस प्रकार एक नया धर्म चलाया था, इसका वर्णन विश्वकोश में अन्यत्र किया गया है (दे. लूथर)। उस समय समस्त जर्मनी लगभग चार सौ स्वतंत्ररूप राज्यों में विभक्त था। उनके अधिकांश शासकों ने काथलिक सम्राट् चार्ल्स के विरोध में लूथर को सरंक्षण प्रदान किया और अपनी प्रजा को लुथर के चर्च में मिला दिया। शीघ्र ही स्कैंडिनेविया के समस्त ईसाई भी लूथरन धर्म में सम्मिलित हुए। स्विटजरलैंड में धर्मसुधार के दो नेता सर्वप्रधान थे - जूरिक में जिं्वगली (झ्ध्र्त्दढ़थ्त्, 1424-1436 ई.) और जनीवा में कैलविन (1509-1564 ई.), दोनों के अनुयायी बाद में एक ही केलविनिस्ट चर्च में सम्मिलित हो गए। यह संप्रदाय हालैंड, स्कॉटलैंड तथा फ्रांस के कुछ भागों में भी फैल गया। स्कॉटलैंड में इसका नाम प्रेसबिटरीय धर्म रखा गया है (दे. प्रेसबिटरीय धर्म) फ्रांस में पहले लूथर का प्रभाव पड़ा किंतु बाद में वहाँ के अधिकांश प्रोटेस्टैट धर्मावलंबी, जो यूगनी कहलाते हैं, कैलविन के अनुयायी बन गए। उनका संगठन एक राजनीतिक दल के रूप में से बहुत समय तक सक्रिय रहा (दे. यूगनो)। इंग्लैंड के राजा ने प्रारंभ ही से लूथर का विरोध किया था। उन्होंने एक ग्रंथ भी लिखा था जिसमें उन्होंने धर्म के मामलों में पोप के ईश्वरदत्त अधिकार का प्रतिपादन किया। यद्यपि हेनरी जीवन भर अपने राज्य में प्रोटेस्टैंट सिद्धान्तों का प्रचार रोकने का प्रयास करते रहे, फिर भी उन्होंने व्यक्तिगत कारणों से 1531 ई. में इंग्लैंड का चर्च रोम से अलग कर दिया, इस प्रकार ऐंग्लिकन समुदाय प्रारंभ हुआ था। हेनरी के उत्तराधिकारियों के समय में उस चर्च पर प्रोटेस्टैंट विचारधारा का गहरा प्रभाव पड़ा जिससे आजकल वह प्रोटेस्टैंट धर्म की तीन प्रमुख शाखाओं (लूथरन, कैलविनिस्ट और ऐंग्लिकन) में से एक माना जाता है किंतु वास्तव में ऐंग्लिकन समुदाय की उत्पत्ति, विकास और प्रचार का अपना अलग इतिहास है (दे. ऐंग्लिकन समुदाय)। इन तीन संप्रदायों के अतिरिक्त धर्मसुधार आंदोलन के फलस्वरूप प्रोटेस्टैंट धर्म के और बहुत से उपसंप्रदायों का उद्भव हुआ जिनका यहाँ पर उल्लेख करना अनावश्यक है। अपेक्षाकृत अधिक महत्व रखनेवाले संप्रदायों का किंचित् विवरण कोश में अन्यत्र दिया गया है (दे. प्रोटेस्टैंट धर्म)।\n\nइस सिंहावलोकन से स्पष्ट हो जाता है कि लूथर द्वारा प्रवर्तित सुधार आंदोलन ने विभिन्न रूप धारण कर समस्त यूरोप को हिला दिया। प्रांरभ में चर्च का सुधार इस आंदोलन का उद्देश्य था किंतु वह शीघ्र ही चर्च की परंपरागत शिक्षा तथा चर्च की संगठनात्मक एकता पर प्रहार करने लगा। इसका परिणाम यह हुआ कि यूरोप के ईसाईसंसार की एकता शताब्दियों के लिए छिन्न-भिन्न हो गई। शासन की दृष्टि से पूर्ण रूप से स्वतंत्र संप्रदायों का उद्भव हुआ, जो एक ही ईसा और बाइबिल को मानते हुए भी अनेक मूलभूत धर्म सिद्धांतों के विषय में भिन्न भिन्न मतों का प्रतिपादन करते हैं।\n\nराजनीतिक दृष्टि से धर्मसुधार का परिणाम बहुत ही व्यापक रहा। यूरोप की उत्तरमध्यकालीन परिस्थिति ऐसी थी कि शासकों ने भी अनिवार्य रूप से इस धार्मिक आंदोलन में सक्रिय भाग लिया है। वे अपनी प्रजा को अपने ही धर्म में सम्मिलित करने अथवा बनाए रखने के उद्देश्य से युद्ध करने के लिए तैयार हो गए। इस प्रकार यूरोप के इतिहास में धर्म के नाम पर अनेक युद्धों की चर्चा है, जैसे, जर्मनी में 30 वर्षीय युद्ध (थरटी ईअर्स वॉर) फ्रांस में युगनो युद्ध और हॉलैंड में सम्राट् चार्ल्स पंचम के विरुद्ध सफल स्वतंत्रता संग्राम।\n\nऊपर इसका उल्लेख हो चुका है कि काथलिक चर्च में समय समय पर सुधार आंदोलनों का प्रवर्त्तन होता रहा है किंतु 16वीं शताब्दी के विद्रोहात्मक धर्मसुधार से काथलिक चर्च को विशेष रूप से प्रेरणा मिली। इस शताब्दी में पोप के रूप में प्रतिभाशाली व्यक्तियों का चुनाव हुआ जिन्होंने चर्च के शासन में फिर अध्यात्म को प्राथमिकता दिला दी है जिससे समस्त काथलिक संसार में पोप का पद पुन: पूर्णरूपेण सम्मानित हो सका। बिशपों की सामंतशाही को समाप्त कर दिया गया और चारों और साधुस्वभाव व्यक्तियों की नियुक्ति से जनता के सामने बिशप का प्राचीन आदर्श उभरने लगा, जो अपनी प्रजा का धर्मगुरु एवं आध्यात्मिक चरवाहा (नेता) है। ट्रेंट नामक नगर में चर्च की 19वीं विश्वसभा का आयोजन हुआ जिसमें चर्च के नए संगठन के अतिरिक्त विशेष रूप में साधारण पुरोहितों के शिक्षण का प्रबंध किया गया। अत: चर्च की सभी श्रेणियों में सुधार हुआ और जनसाधारण में धार्मिक शिक्षा का उचित प्रचार हो सका। इस कार्य में धर्मसंधियों ने दूसरे पुरोहितों का हाथ बँटाया है। 16वीं शताब्दी में जेसुइट आदि कई धर्मसंघों की स्थापना हुई तथा प्राचीन (विशेषकर फ्रांसिस्की तथा कार्मेलाइट) धर्मसंघों में सुधार लाया गया जिससे वे सबके सब समय की आवश्यकताओं के अनुसार धर्म की सेवा कर सकें। इस प्रकार हम देखते हैं कि धर्म सुधार का संभवत: सबसे गहरा एवं हितकरी प्रभाव पुराने काथिलक चर्च पर ही पड़ा।\n\nयूरोपीय धर्मसुधार का व्यापक प्रसार एवं गहरा प्रभाव देखकर अनायास ही मन में यह प्रश्न उठता है कि इस अपूर्व सफलता का क्या रहस्य है। इस सफलता के अनेक कारणों की कल्पना की गई है :\n\n15वीं शताब्दी के आरंभ में काथलिक चर्च की दयनीय दशा और इसके कर्णधारों की निष्क्रियता, चर्च की संपति हड़पने को उत्सुक राजनेताओं की सहायता, नवजागरण के कारण व्यक्तिगत स्वतंत्रता का आंदोलन, मुद्रण के आविष्कार से प्रचार की नई सुविधाएँ। यह सब आलोच्य आंदोलन के लिए सहायक सिद्ध हुआ किंतु इसकी सफलता का रहस्य अन्यत्र ढूँढना चाहिए।\n\nधर्मसुधार के प्रवर्तक सात्विक और धार्मिक भाव से प्रेरित थे और वे अपने प्रतिभाशाली सहयोगियों में भी धार्मिक नवजागरण की उत्कट अभिलाषा उत्पन्न करने में समर्थ हुए। इनके विचार में उस नवजागरण का एकमात्र उपाय यह प्रतीत होता था कि मनुष्य अपने पुण्य कर्मों पर भरोसा न रखकर ईसा के प्रति आत्मसमर्पण करे और बाइबिल में सुरक्षित ईसा के सुसमाचार पर विश्वास करे। उन्होंने बाइबिल को अपने आंदोलन का आधार बना लिया, बाइबिल में जो शक्ति निहित है उसी के द्वारा उन्हें सफलता मिली है।\n\nआजकल ईसाई संसार में 16वीं शताब्दी की घटनाओं पर तटस्थ दृष्टि से विचार किया जा रहा है। काथिलक यूरोपीय धर्मसुधार की रचनात्मक उपलब्धियों को स्वीकार करते हैं और प्रोटेटैंस्ट समझने लगे हैं कि चर्च की तत्कालीन बुराइयों का विरोध करना कितना ही आवश्यक क्यों न था, उसकी एकता छिन्न भिन्न करने से ईसाई धर्म को बहुत हानि हुई है। द्वितीय महायुद्ध के बाद ईसाई एकता के आंदोलन को अत्यधिक महत्व दिया जाने लगा है और धर्मसुधार के दुष्परिणाम को दूर करने की अभिलाषा बढ़ती जा रही है।\n\nमार्टिन लूथर के पूर्व धर्मसुधारकों ने चौदहवीं सदी से ही चर्च और पोपशाही की अनैतिकता, भ्रष्टता, विलासिता और शोषण के विरूद्ध अपनी आवाज बुलंद की और उन्होंने धर्म सुधार की पृष्ठ भूमि तैयार की। ये अधोलिखित हैं।\n\nयह इंग्लैण्ड में आक्सफोर्ड विश्वविद्यालय में प्रोफेसर था। उसने कैथोलिक धर्म और चर्च की अनेक गलत परम्पराओं और गतिविधियों की ओर जनसाधारण का ध्यान आकृष्ट किया। उसने बाइबल का अंग्रेजी में अनुवाद किया जिससे कि साधारण जनता ईसाई धर्म के वास्तविक सिद्धांतों को समझ सके एवं पादरियों द्वारा गुमराह होने से बच सके। प्रत्येक ईसाई को बाइबल के सिद्धांतों के अनुसार कार्य करना चाहिए। इसलिए पादरियों के मार्गदशर्न की आवश्यकता नहीं है। उसके मतानुसार चर्च में व्याप्त भ्रष्टाचार का कारण उसकी अतुल सम्पित्त है, इसलिए उसने राजा को सुझाव दिया कि राज्य इस अतुल सम्पित्त को ले ले और गिरजाघरों को पवित्र स्थल बनावे। \n\nयह जर्मनी में बोहेमिया का निवासी था और प्राग विश्वविद्यालय में प्रोफेसर था। उसने यह मत प्रतिपादित किया कि एक साधारण ईसाई बाइबल के सिद्धांतों का अनुकरण कर मुक्ति प्राप्त कर सकता है। इसके लिए गिरजाघर और पादरी की आवश्यकता नहीं है। चर्च की आलोचना करने पर उसे नास्तिक कहा गया और नास्तिकता के आरोप में उसे 1415 ई. में जीवित जला दिया।\n\nयह इटली में फ्लोरेंस नगर का विद्वान पादरी था। उसने पोप की अनैतिकता, भ्रष्टता और विलासिता तथा चर्च में व्याप्त दोषों की कटु आलोचना की। इस पर पोप और उसकी परिषद ने उसे दंडित कर जीवित जला दिया।\n\nयह हालैण्ड निवासी था। उसने लैटिन साहित्य तथा ईसाई धर्मशास्त्रों का अध्ययन किया। इस अध्ययन से उसमें मानवतावादी पवित्र भावनाएँ जागृत हुई। 1484 ई. में वह ईसाई मठ में धार्मिक जीवन व्यतीत करने चला गया। 1492 ई. तक उसने यहाँ एक पादरी के पद पर कार्य किया। यहाँ उसने चर्च व मठों में व्याप्त भ्रष्टाचार और विलास को स्वयं देखा। 1499 ई. में वह इंग्लैण्ड चला गया। वहाँ वह टामस, मूर, जान कालेट, टामस लिनेकर जैसे इंग्लैण्ड के विद्वानों के संपर्क में आया और उसने अनेक पुस्तकें और लेख लिखे। उसकी रचनाओं में 'कलेक्टिनिया एडगियोरम' जिसका अनुवाद अनेक भाषाओं में हुआ, “कोलोक्वीज“ , “हैण्डबुक ऑॅफ ए क्रिश्चयन गोल्जर“ और 1511 ई. में लिखी 'द प्रेज ऑफ फाली' प्रमुख है। अंतिम ग्रंथ में उसने व्यंग्य और परिहास की शैली में धर्माधिकारियों की पोल खोली और चर्च में व्याप्त दोषों और अनैतिकता पर प्रहार किये। उसने 1515 ई में उसने बाइबल का लेटिन भाषा में अनुवाद किया। \n\nजर्मनी में सेक्सनी क्षेत्र के गाँव आइबेन में लूथर का जन्म 10 नवम्बर 1483 को एक साधारण कृषक परिवार में हुआ था। उसने इरफर्ट विवि में धर्म शास्त्र और मानववादी शास्त्र का अध्ययन किया। 1508 ई. मेंं वह गटेनवर्ग के विश्वविद्यालय में धर्म और दशर्नशास्त्र का प्रोफेसर नियुक्त हुआ। पर वह पादरी और प्रोफेसर बन गया। उसने ईसाई धर्म और संतों के सिद्धांतों का गहन अध्ययन किया और इस निष्कर्ष पर पहुँचा कि मोक्ष प्राप्ति के लिए मनुष्य में ईश्वर के प्रति श्रद्धा एवं ईश्वर की क्षमाशलता में विश्वास नितांत आवश्यक है। उसने तत्कालीन कैथोलिक धर्म में प्रचलित सप्त संस्कारों के सिद्धांत का खंडन किया।\n\nउसने एक नया इसाई सम्प्रदाय चलाया जो 'प्रोटेस्टैंट' कहलाया।\n\n\n", "id": "181785", "title": "यूरोपीय धर्मसुधार"}
{"url": "https://hi.wikipedia.org/wiki?curid=181803", "text": "स्थलाकृति\n\nस्थलाकृति (अंग्रेज़ी: , टोपॉग्रफ़ी) ग्रहविज्ञान की एक शाखा है जिसमें पृथ्वी या किसी अन्य ग्रह, उपग्रह या क्षुद्रग्रह की सतह के आकार व आकृतियों का अध्ययन किया जाता है। नक़्शों के निर्माण में स्थलाकृति का विशेष महत्व है।\n\n", "id": "181803", "title": "स्थलाकृति"}
{"url": "https://hi.wikipedia.org/wiki?curid=181820", "text": "हनुमान मंदिर, कनॉट प्लेस\n\nनई दिल्ली के हृदय कनॉट प्लेस में महाभारत कालीन श्री हनुमान जी का एक प्राचीन मंदिर है। यहाँ पर उपस्थित हनुमान जी स्वयंभू हैं। बालचन्द्र अंकित शिखर वाला यह मंदिर आस्था का महान केंद्र है। इसके साथ बने शनि मंदिर का भी प्राचीन इतिहास है। एक दक्षिण भारतीय द्वारा बनवाए गए कनॉट प्लेस शनि मंदिर में दुनिया भर के दक्षिण भारतीय दर्शनों के लिए आते हैं। प्रत्येक मंगलवार एवं विशेषतः हनुमान जयंती के पावन पर्व पर यहां भजन संध्या और भंडारे लगाकर श्रद्धालुओं को प्रसाद वितरित किया जाता है। इसके साथ ही भागीरथी संस्था के तत्वाधान में संध्या का आयोजन किया जाता है, साथ ही क्षेत्र में झांकी निकाली जाती है।\n\nदिल्ली का ऐतिहासिक नाम इंद्रप्रस्थ शहर है, जो यमुना नदी के तट पर पांडवों द्वारा महाभारत-काल में बसाया गया था। तब पांडव इंद्रप्रस्थ पर और कौरव हस्तिनापुर पर राज्य करते थे। ये दोनों ही कुरु वंश से निकले थे। हिन्दू मान्यता के अनुसार पांडवों में द्वितीय भीम को हनुमान जी का भाई माना जाता है। दोनों ही वायु-पुत्र कहे जाते हैं। इंद्रप्रस्थ की स्थापना के समय पांडवों ने इस शहर में पांच हनुमान मंदिरों की स्थापना की थी। ये मंदिर उन्हीं पांच में से एक है।\n\nमान्यता अनुसार प्रसिद्ध भक्तिकालीन संत तुलसीदास जी ने दिल्ली यात्रा के समय इस मंदिर में भी दर्शन किये थे। तभी उन्होंने इस स्थल पर ही हनुमान चालीसा की रचना की थी। तभी मुगल सम्राट ने उन्हें अपने दरबार में कोई चमत्कार दिखाने का निवेदन किया। तब तुलसीदास जी ने हनुमान जी की कृपा से सम्राट को संतुष्ट किया। सम्राट ने प्रसन्न होकर इस मंदिर के शिखर पर इस्लामी चंद्रमा सहित किरीट कलश समर्पित किया। इस कारण ही अनेक मुस्लिम आक्रमणों के बावजूद किसी मुस्लिम आक्रमणकारी ने इस इस्लामी चंद्रमा के मान को रखते हुए कभी भी इस मंदिर पर हमला नहीं किया। \nवर्तमान इमारत आंबेर के महाराजा मान सिंह प्रथम (१५४०-१६१४) ने मुगल सम्राट अकबर के शासन काल में बनवायी थी। इसका विस्तार महाराजा जयसिंह द्वितीय (१६८८-१७४३) ने जंतर मंतर के साथ ही करवाया था। दोनों इमारतें निकट ही स्थित हैं। इसके बाद भी इमारत में समय समय पर कुछ कुछ सुधार, बदलाव आदि होते रहे। इस मंदिर का विशेष आकर्षण यहां होने वाले २४-घंटे का अटूट मंत्र जाप है। ये जाप \"श्रीराम जय राम, जय जय राम॥\" मंत्र का होता है और यह १ अगस्त, १९६४ से अनवरत चलता आ रहा है। बताया जाता है, कि ये विश्व का सबसे लंबा जाप है और इसकी रिकॉर्डिंग गिनीज़ बुक ऑफ वर्ल्ड रिकॉर्ड्स में भी अंकित है।\n\nकनॉट प्लेस में हनुमान मंदिर के निकट स्थित एशिया के सबसे बड़े फूलों के बाजार में पिछले पंद्रह सालों से फूलों का बाजार भी लगता है। सरकारी आंकड़ों के मुताबिक वर्ष २००६-०७ में कुल ६४९.८४ करोड़ रुपये का निर्यात हुआ जबकि पिछले वर्ष यह २१०.९९ करोड़ रुपये का था। केवल दिल्ली से लगभग १०० करोड़ रुपये का निर्यात हुआ है।\n\n", "id": "181820", "title": "हनुमान मंदिर, कनॉट प्लेस"}
{"url": "https://hi.wikipedia.org/wiki?curid=181838", "text": "एनिमल फार्म\n\nएनिमल फार्म (Animal Farm) अंग्रेज उपन्‍यासकार जॉर्ज ऑरवेल की कालजयी रचना है। बीसवीं सदी के महान अंग्रेज उपन्‍यासकार जॉर्ज ऑरवेल ने अपनी इस कालजयी कृति में सुअरों को केन्‍द्रीय चरित्र बनाकर बोलशेविक क्रांति की विफलता पर करारा व्‍यंग्‍य किया था। अपने आकार के लिहाज से लघु उपन्‍यास की श्रेणी में आनेवाली यह रचना पाठकों के लिए आज भी उतनी ही असरदार है।\n\nजॉर्ज ऑरवेल (1903-1950) के संबंध में खास बात यह है कि उनका जन्‍म भारत में ही बिहार के मोतिहारी नामक स्‍थान पर हुआ था। उनके पिता ब्रिटिश राज की भारतीय सिविल सेवा के अधिकारी थे। ऑरवेल का मूल नाम 'एरिक आर्थर ब्‍लेयर' था। उनके जन्‍म के साल भर बाद ही उनकी मां उन्‍हें लेकर इंग्‍लैण्‍ड चलीं गयीं थीं, जहां से‍वानिवृत्ति के बाद उनके पिता भी चले गए। वहीं पर उनकी शिक्षा हुई।\n\nएनीमल फॉर्म 1944 ई. में लिखा गया। प्रकाशन 1945 में इंग्लैंड में हुआ जिसे तब नॉवेला (लघु उपन्यास) कहा गया, यद्यपि इसकी मूल संरचना एक लंबी कहानी की है। कथाकार ने इसे प्रथम प्रकाशन के समय शीर्षक के साथ एक 'फेयरी टेल' (परी कथा) कहा, क्योंकि परी कथाओं के समान ही विभिन्न जानवर-जन्तु यहां उपस्थित हैं। प्रकाशन के साथ ही विश्व की सभी भाषाओं में इसके अनुवाद प्रकाशित हुए- फ्रांसीसी भाषा में तो कई-कई!! प्रसिद्ध टाइम मैगजीन ने वर्ष 2005 में एक सर्वेक्षण में 1923-2005 ई. की कालावधि में प्रकाशित 100 सर्वाधिक प्रसिद्ध उपन्यासों में इस उपन्यास की गिनती की और साथ ही 20 वीं शती की माडर्न लाइब्रेरी लिस्ट ऑफ बेस्ट 100 नॉवल्स में इसे 31 वां स्थान दिया।\n\nएनीमल फॉर्म उपन्यास साम्यवादी क्रांति आन्दोलन के इतिहास में आई भ्रष्टता को नंगा करता हुआ दर्शाता है कि ऐसे आंदोलन के नेतृत्व में प्रवेश कर गयी स्वार्थपरता, लोभ-मोह तथा बहुत-सी अच्छी बातों से किनाराकशी किस प्रकार आदर्शो के स्वप्न-राज्य (यूटोपिया) को खंडित कर सारे सपनों को बिखेर देती है। मुक्ति आंदोलन जिस उद्देश्य की प्राप्ति के लिए किया गया था, सर्वहारा वर्ग को सत्ता हस्तांतरित करने के लिए, उस उद्देश्य से भटक कर वह बहुत त्रासदायी बन जाता है। एनिमल फॉर्म का गणतंत्र इन्हीं सरोकारों पर अपनी व्यवस्था को केंद्रित करते हैं। पशुओं के बाडे का पशुवाद (एनीमलिज्म) वस्तुत: सोवियत रूस के 1910 से 1940 की स्थितियों का फंतासीपरक रूपात्मक प्रतीकीकरण है। \n\nऐनिमल फार्म की कहानी कुछ इस प्रकार है : मेनर फार्म के जानवर अपने मालिक के खिलाफ बगावत कर देते हैं और शासन अपने हाथ में ले लेते हैं। जानवरों में सूअर सबसे चालाक हैं और इसलिए वे ही इनका नेतृत्‍व करते हैं। सुअर जानवरों की सभा में सुशासन के कुछ नियम तय करते हैं। पंरतु बाद में ये सुअर आदमी का ही रंग-ढंग अपना लेते हैं और अपने फायदे व ऐश के लिए दूसरे जानवरों का शोषण करने लगते हैं। इस क्रम में वे नियमों में मनमाने ढंग से तोड़-मरोड़ भी करते हैं। मसलन नियम था – ALL ANIMALS ARE EQUAL (सभी बराबर हैं) लेकिन उसमें हेराफेरी कर उसे बना दिया जाता है:-\n\n\n", "id": "181838", "title": "एनिमल फार्म"}
{"url": "https://hi.wikipedia.org/wiki?curid=181843", "text": "सॉफ्टवेयर डेवलपमेंट प्रक्रिया डेवेलपमेंट\n\nसॉफ्टवेयर डेवलपमेंट प्रक्रिया किसी सॉफ्टवेयर उत्पाद के विकास में अधिरोपित एक संरचना है। इसके पर्यायवाची शब्द सॉफ्टवेयर जीवन चक्र और \"सॉफ्टवेयर प्रक्रिया\" हैं। ऐसी प्रक्रियाओं के लिए कई मॉडल हैं। इनमें से प्रत्येक प्रक्रिया के दौरान होने वाले विभिन्न प्रकार के कार्यों या गतिविधियों तक पहुंच का वर्णन करते हैं।\n\nसॉफ्टवेयर डेवलपमेंट संगठनों की सबसे बड़ी निकाय प्रक्रिया संबंधी पद्धतियों का कार्यान्वयन करती है। उनमें से अनेक रक्षा उद्योग में हैं, जिनके लिये संयुक्त राज्य अमेरिका में अनुबंधों को प्राप्त करने के लिये 'प्रक्रिया मॉडलों' के आधार पर मूल्यांकन की आवश्यकता होती है।\n\nचयन की पद्धति का वर्णन करने, सॉफ्टवेयर के लिये जीवन चक्र का कार्यान्वयन करने और उसके निरीक्षण के लिए अंतर्राष्ट्रीय मानक ISO 12207 है।\n\nउत्पादकता और गुणवत्ता में सुधार करने वाली एक दोहराने योग्य, पूर्वानुमेय प्रक्रिया का पता लगाना दशकों से लक्ष्य रहा है। कुछ लोग सॉफ्टवेयर लेखन के प्रकटत: कठिन कार्य को व्यवस्थित या निश्चित रूप देने की कोशिश करते हैं। अन्य लोग सॉफ्टवेयर लेखन के लिए परियोजना प्रबंधन तकनीक प्रयोग में लाते हैं। परियोजना प्रबंधन के बिना, सॉफ्टवेयर परियोजनाओं की सुपुर्दगी में सहज में ही विलंब हो सकता है या इसकी लागत बजट से अधिक हो सकती है। कार्यात्मकता, लागत, या सुपुर्दगी की समय-सारिणी के संबंध में बड़ी संख्या में परियोजनाओं द्वारा अपनी अपेक्षाओं को पूरा नहीं कर पाने के कारण, प्रभावकारी परियोजना प्रबंधन में कमी रह जाती है।\n\nसंस्थाएं एक सॉफ्टवेयर इंजीनियरिंग प्रक्रिया समूह (SEPG) की रचना कर सकती हैं, जो प्रक्रिया में सुधार का केंद्र बिन्दु होता है। विभिन्न कौशलों वाले लाइन पेशेवरों से बना यह समूह सॉफ्टवेयर इंजीनियरिंग प्रक्रिया में सुधार लाने के कार्य में शामिल प्रत्येक व्यक्ति के सहयोगपूर्ण प्रयास के केंद्र में स्थित रहता है।\n\nसॉफ्टवेयर उत्पाद तैयार करने में महत्वपूर्ण कार्य आवश्यकताओं का पता करना या आवश्यकताओं का विश्लेषण करना है। ग्राहक जिन्हें अंतिम परिणाम के रूप में चाहते हैं, उस संबंध में उनके पास विशेष रूप से एक अमूर्त विचार होता है, न कि सॉफ्टवेयर को क्या करना चाहिए इस संबंध में. इस बिंदु पर अपूर्ण, अस्पष्ट या विरोधाभासी आवश्यकताओं की कुशल और अनुभवी सॉफ्टवेयर इंजीनियरों के द्वारा पहचान की जाती हैं। सजीव कोड (कूट) का प्रदर्शन अक्सर ही करते रहने से आवश्यकताओं के गलत रहने का जोखिम कम हो सकता है।\n\nएक बार ग्राहकों से सामान्य आवश्यकताओं को एकत्रित कर लेने के बाद विकास के कार्य-क्षेत्र के विश्लेषण का निर्धारण किया जाना चाहिए और इसे स्पष्ट रूप से व्यक्त करना चाहिए। इसे अक्सर एक कार्य-क्षेत्र संबंधी दस्तावेज कहा जाता है।\n\nलागत के फलन के कारण या विकास के आरंभ में अस्पष्ट आवश्यकताओं के परिणामों के कारण कुछ कार्यात्मकता परियोजना के कार्य-क्षेत्र से बाहर हो जा सकती है। यदि विकास बाह्य रूप से किया जाता है, तो इस दस्तावेज़ को एक कानूनी दस्तावेज माना जा सकता है ताकि यदि कभी कोई विवाद हो तो ग्राहक को किये गए वादों के संबंध में किसी भी संशयता को स्पष्ट किया जा सके।\n\nएक नए सॉफ्टवेयर को तैयार करने में अक्सर डोमेन विश्लेषण पहला कदम होता है। चाहे यह वर्तमान सॉफ्टवेयर में कोई परिवर्द्धन, एक नया प्रोग्राम (एपलीकेशन), एक नया उपतंत्र या एक पूर्ण नयी व्यवस्था हो। यह मानकर कि डेवलपर्स (विश्लेषक सहित) नये सॉफ्टवेयर के विषय-क्षेत्र के कुशल जानकार नहीं हैं, पहला काम सॉफ्टवेयर के तथाकथित 'डोमेन' का पता लगाना है। डोमेन के संबंध में वे पहले से ही जितने अधिक जानकार होते हैं, उतने कम काम की आवश्यकता होती है। इस कार्य का एक अन्य उद्देश्य उस क्षेत्र के विशेषज्ञों के साथ आवश्यकताओं को प्राप्त करने वाले और उसे एकत्रित करने वाले विश्लेषकों का डोमेन की अपनी शब्दावली में बात कराना है जिससे इन विशेषज्ञों (क्षेत्र के विशेषज्ञों) द्वारा व्यक्त किये गए कथनों के संबंध में बेहतर समझ विकसित किया जा सके। यदि विश्लेषक उचित शब्दावली का प्रयोग नहीं करता है तो यह संभावना है कि उनकी बातों को गंभीरता से नहीं लिया जायेगा. इस प्रकार, यह चरण आवश्यकताओं का पता करने और उसे एकत्रित करने में एक महत्वपूर्ण प्रस्तावना होगी। यदि किसी विश्लेषक ने उचित काम नहीं किया है तो भ्रम उत्पन्न हो सकता है: \"\"मैं जानता हूं कि आप यह मानते हैं कि मैंने जो कहा उसके संबंध में आप जो सोचते है उसे आपने समझ लिया, लेकिन मैं इस संबंध में निश्चित नहीं हूं कि आप यह समझते हैं कि आपने जैसा सुना वह मेरा मतलब नहीं था\" \".\n\nविनिर्देश वह कार्य है जिसके अर्न्तगत लिखे जाने वाले सॉफ्टवेयर का संभवतः सही ढ़ंग से वर्णन किया जाता है। व्यावहारिक रूप से, सबसे सफल विनिर्देशों को पहले से ही सुविकसित प्रोग्रामों को समझने और अधिक अनुकूल बनाने के लिए लिखा जाता है। यद्यपि अक्सर प्रोग्राम के विकास के पूर्व सुरक्षा की दृष्टि से अत्यंत महत्वपूर्ण सॉफ्टवेयर तंत्रों का सावधानीपूर्वक विस्तृत विवरण दिया जाता है। \"विनिर्देश बाहरी अंतरफलकों के लिए सबसे अधिक महत्वपूर्ण होते हैं जिन्हें स्थिर बना रहना चाहिए.\" विनिर्देश पर्याप्त रूप से सही हैं या नहीं इसका निर्धारण करने का एक अच्छा तरीका आवश्यकताओं और उपयोग की स्थितियों की शुद्ध रूप से सक्षमता सुनिश्चित करने के लिए तीसरे पक्ष द्वारा दस्तावेजों की समीक्षा कराना है।\n\nएक सॉफ्टवेयर सिस्टम या \"सॉफ्टवेयर संरचना\" की बनावट उस तंत्र का एक अमूर्त निरूपण है। संरचना का संबंध यह सुनिश्चित करना है कि सॉफ्टवेयर सिस्टम उत्पाद की आवश्यकताओं को पूरा करेगा, साथ ही साथ यह भी सुनिश्चित करना है कि भविष्य में आवश्यकताओं के संबंध में चर्चा की जा सकती है। संरचना संबंधी कदम सॉफ्टवेयर सिस्टम और अन्य सॉफ्टवेयर उत्पादों के बीच इंटरफेसों (अंतराफलकों), साथ ही साथ अंतर्निहित हार्डवेयर या परिचारक प्रचालन सिस्टम की चर्चा करता है।\n\nकार्यान्वयन प्रक्रिया का एक हिस्सा है जहां सॉफ्टवेयर इंजीनियर परियोजना के लिए कोड (कूट) का प्रोग्राम लिखते हैं।\n\nसॉफ्टवेयर परीक्षण सॉफ्टवेयर डेवलपमेंट प्रक्रिया का एक अभिन्न और महत्वपूर्ण हिस्सा है। प्रक्रिया का यह हिस्सा यह सुनिश्चित करता है कि बग की पहचान यथाशीघ्र कर ली जाये.\n\nभविष्य में रखरखाव और सॉफ्टवेयर में वृद्धि करने के उद्देश्य से सॉफ्टवेयर के आंतरिक डिजाइन का दस्तावेजीकरण सम्पूर्ण विकास के दौरान किया जाता है। इसमें एक API का संलेखन शामिल हो सकता है, चाहे वह बाहरी या आतंरिक हो।\n\nकोड का उचित रूप से परीक्षण करने के बाद परिनियोजन आरंभ होता है, इसे निर्गमन और बिक्री के लिए स्वीकृत किया जाता है, नहीं तो किसी उत्पादन परिवेश में वितरित कर दिया जाता है।\n\nसॉफ्टवेयर प्रशिक्षण और सहायता महत्वपूर्ण है, क्योंकि सॉफ़्टवेयर परियोजनाओं का एक बड़ा प्रतिशत इस कारण से असफल हो जाता है कि डेवलपर्स (विकासक) यह नहीं समझ पाते हैं कि यदि संस्था में कोई भी व्यक्ति सॉफ़्टवेयर का अंतिम उपयोग नहीं करता है तो इसे विकसित करने वाले दल द्वारा सॉफ़्टवेयर को तैयार करने में लगे समय और योजना का कोई महत्त्व नहीं रहता है। लोग अक्सर परिवर्तन के प्रतिरोधी होते हैं और एक अपरिचित क्षेत्र में जोखिम उठाने से बचते हैं। इसलिए परिनियोजन चरण के हिस्सा के रूप में, आपके सॉफ़्टवेयर के नए ग्राहकों के लिए प्रशिक्षण कक्षाएं आयोजित होना बहुत आवश्यक है।\n\nनए अविष्कृत समस्याओं या नयी आवश्यकताओं का सामना करने के लिये सॉफ़्टवेयर के अनुरक्षण (रखरखाव) और उसके परिवर्द्धन में सॉफ़्टवेयर के आरंभिक विकास की अपेक्षा अधिक समय लग सकता है। अप्रत्याशित समस्या में सुधार करने के लिये एक कोड को जोड़ना आवश्यक है जो मूल डिजाइन में उपयुक्त नहीं बताता है या यह भी हो सकता है कि कोई ग्राहक अधिक कार्यात्मकता का अनुरोध कर रहा हो और उनके अनुरोध को समायोजित करने के लिये कोड को जोड़ा जा सकता है। इसी चरण में ग्राहकों के कॉल प्राप्त होते हैं और आप देखते हैं कि ग्राहक द्वारा प्रयोग करने के पूर्व क्या आपका परीक्षण समस्याओं को दूर करने के लिये व्यापक रूप से पर्याप्त था। यदि अनुरक्षण वाले चरण का श्रम लागत पूर्व चरणों के श्रम लागत की अपेक्षा 25% से अधिक होता है, तो यह संभावना होती है कि कम से कम एक पूर्व चरण की समग्र गुणवत्ता अच्छी नहीं है। उस स्थिति में, प्रबंधन को अनुरक्षण संबंधी लागत अनियंत्रित होने के पूर्व सिस्टम को पुनर्निर्मित करने के विकल्प पर विचार करना चाहिए।\n\nकिसी वास्तविक या महसूस किये गए विषयों की पहचान करने वाले सॉफ्टवेयर का परीक्षण करने वाले ग्राहकों/क्षेत्र दलों के साथ इंटरफेस द्वारा जुड़े रहने के लिये विकास दलों को अनुमति प्रदान करने के लिये प्रक्रिया के इस चरण में अक्सर बग ट्रैकिंग सिस्टम उपकरण परिनियोजित किये जाते हैं। ये सॉफ्टवेयर उपकरण, मुक्त स्रोत और वाणिज्यिक लाइसेंस प्राप्त दोनों, सूचित विषयों को अपनाने, उनकी समीक्षा करने के लिये एक अनुकूल करने योग्य प्रक्रिया उपलब्ध कराते हैं।\n\nसमस्याओं के बहुत पहले महत्वपूर्ण विषयों पर से पर्दा हटाने में शामिल लोगों की मदद करने के लिये पुनरावृत्तीय विकास किसी सॉफ्टवेयर परियोजना के लिये प्रारंभ में छोटे लेकिन हमेशा अधिक बड़े हिस्सों की संरचना निर्धारित करती है। पुनरावृत्तीय प्रक्रियाओं को वाणिज्यिक डेवलपर्स (विकासकों) के द्वारा अधिक पसंद किया जाता है, क्योंकि यह अपनी मांग को परिभाषित करने में असमर्थ ग्राहक के अभिकल्प (डिजाइन) लक्ष्यों तक पहुंचने की संभाव्यता की अनुमति प्रदान करता है।\n\nएजाइल (दक्ष) सॉफ्टवेयर डेवलपमेंट प्रक्रियाओं का निर्माण पुनरावृत्तीय विकास की नींव पर किया जाता है। वे उस नींव में एक अधिक हल्का, पारंपरिक दृष्टिकोणों की अपेक्षा अधिक लोक-केन्द्रित दृष्टिकोण जोड़ते हैं। एजाइल प्रक्रियाएं प्राथमिक नियंत्रण प्रणाली के रूप में योजना की अपेक्षा फीडबैक (प्रतिपुष्टि) का उपयोग करती हैं। फीडबैक नियमित परीक्षणों और विकसित होने वाले सॉफ्टवेयर के रिलीज होने से प्रेरित होता है।\n\nएक्सट्रीम प्रोग्रामिंग (XP) सर्वश्रेष्ठ ज्ञात पुनारावृत्तीय प्रक्रिया है। पहले के पुराने \"बैच\" प्रक्रियाओं की अपेक्षा XP में, चरणों को अत्यधिक छोटे (या \"निरंतर\") चरणों में पूरा किया जाता है। प्रथम चरण (स्वेच्छापूर्वक अपूर्ण) उन कदमों से होकर गुजरता है, जिसमें वाटरफॉल मॉडल के प्रत्येक पूर्ण चरण में लगने वाले महीनों और वर्षों की तुलना में एक दिन या एक सप्ताह लग सकता है। सबसे पहले, व्यक्ति विकास के लिए ठोस लक्ष्य उपलब्ध कराने के लिए कम्प्युटरीकृत (स्वतः) परीक्षणों को अंकित करता है। अगला चरण कूट लेखन (प्रोग्रामरों के युग्म द्वारा) है, जो सभी परीक्षणों के बीत जाने और प्रोग्रामर द्वारा और अधिक परीक्षण करने की आवश्यकता महसूस नहीं किये जाने के बाद पूर्ण हो जाता है। डिजाइन और संरचना, रिफ्रैक्टरिंग से उत्पन्न होती है और कूट लेखन (कोडिंग) के बाद आती है। डिजाइन उन्हीं लोगों के द्वारा किया जाता है जो कूट लेखन करते हैं। (केवल अंतिम विशेषता- डिजाइन और कोड का विलय - \"सभी\" अन्य एजाइल प्रक्रियाओं के लिए सामान्य होता है। अपूर्ण लेकिन कार्यात्मक प्रणाली उपयोगकर्ताओं (जिनमें से कम से कम एक विकास दल में रहता है) के लिए प्रभावकारी ढ़ंग से प्रयुक्त या प्रर्दशित की जाती है (कुछ उपसमुच्चय). इस बिंदु पर, विशेषज्ञ सिस्टम के अगले सबसे महत्वपूर्ण भाग के लिए परीक्षण लेखन पुनः शुरू करते हैं।\n\nवाटरफॉल मॉडल एक प्रक्रिया को दर्शाता है, जहां डेवलपर्स (विकासकों) को इन कदमों का क्रम से पालन करना पड़ता है:\n\nजिस प्रकार ढांचा खड़ा होने के बाद निर्माणकर्ता घर की नींव नहीं बदलता है, प्रत्येक कदम के पूरा होने के बाद प्रक्रिया अपने अगले कदम में आगे बढ़ती जाती है।\n\nयह एक गलत धारणा है कि इस प्रक्रिया में आरंभिक कदमों में त्रुटियों को सुधारने की कोई व्यवस्था नहीं है (उदाहरण के लिए, आवश्यकताओं में). वास्तव में, इसी जगह आवश्यकताओं के प्रबंधन की बात सामने आती है, जिसमें परिवर्तन पर नियंत्रण शामिल है। प्रक्रिया के आलोचकों द्वारा पुनरावृत्ति की शुरुआत के द्वारा समस्याओं को दूर करने में प्रतिवादी तर्क महत्वपूर्ण रूप से एक बढ़ी हुई लागत होती है। यह भी एक कारक है जो सुपुर्दगी के समय को बढ़ा देता है और उच्च जोखिम वाली परियोजनाओं में भी इस प्रक्रिया को तेजी से अलोकप्रिय बना देता है।\n\nइस दृष्टिकोण का प्रयोग उच्च जोखिम वाली परियोजनाओं, विशेष रूप से रक्षा संबंधी बड़े अनुबंधों, में किया जाता है। वाटरफॉल में समस्याएं \"विशेष रूप से आवश्यकताओं के विश्लेषण और प्रबंधन में अपरिपक्व इंजीनियरिंग कार्यप्रणालियों\" से उत्पन्न नहीं होती है। वाटरफॉल को लागू करने वाली DOD-STD-2167 के विनिर्देश दर की विफलता के अध्ययन ने यह दर्शाया है कि विशेष रूप से अग्रिम आवश्यकताओं के संग्रह में, कोई परियोजना अपनी प्रक्रिया का जितना अधिक ध्यानपूर्वक पालन करता है, परियोजना द्वारा वर्त्तमान रूप में अप्रयुक्त विशेषताओं को जारी करने की उतनी अधिक संभावना होती है। \n\nअक्सर कथित चरण ग्राहक और आपूर्तिकर्ता के बीच समीक्षा का हिस्सा होते हैं। वास्तव में, आपूर्तिकर्ता जोखिम में विकास कर सकता है और डिजाइन का विकास कर सकता है, लेकिन उसे डिजाइन को मील के पत्थर क्रिटिकल डिजाइन रिव्यू (CDR) को कम कीमत में अवश्य बेचना चाहिए। यह इंजीयरिंग के भार को इंजीनियरों से ग्राहकों में विस्थापित कर देता है, जिनके अन्य कौशल होते हैं।\n\n\n\n\n\n\nऔपचारिक पद्धतियां आवश्यकताओं, विनिर्देश और डिजाइन के स्तर पर सॉफ्टवेयर (और हार्डवेयर) की समस्याओं को हल करने के गणितीय दृष्टिकोण हैं। औपचारिक पद्धतियों के उदाहरण में बी-विधि (B-Method), पेट्री नेट्स, स्वचालित प्रमेय सिद्ध करना, RAISE और VDM शामिल हैं। विभिन्न औपचारिक विनिर्देश संकेतन, जैसे कि Z संकेतन उपलब्ध हैं। अधिक सामान्य रूप से, परिमित अवस्था यंत्रों के सिस्टम की अभिकल्पना (डिजाइनिंग) कर अनुप्रयोग (प्रोग्राम) की प्रवृत्ति का निर्माण एवं अभिपुष्ट करने के लिए स्वचल प्ररूप सिद्धांत (ऑटोमेटा सिद्धांत) का प्रयोग किया जा सकता है।\n\nपरिमित अवस्था यंत्र (FSM) आधारित पद्धतियां निष्पाद्य सॉफ्टवेयर विनिर्देश और पारंपरिक कूटलेखन के लिए उपमार्ग बनाने की अनुमति प्रदान करती है (आभासी परिमित अवस्था यंत्र या कार्यक्रम चालित परिमित अवस्था यंत्र को देखें).\n\nऔपचारिक पद्धतियों का अधिक संभवतः वयाविकी सॉफ्टवेयर में अनुप्रयोग किया जा सकता है, विशेष रूप से जहां सॉफ्टवेयर सुरक्षा की दृष्टि से महत्वपूर्ण है। सॉफ्टवेयर सुरक्षा गारंटी मानक, जैसे कि DO178B वर्गीकरण के उच्चतम स्तर (A स्तर) पर औपचारिक विधियों की मांग करती हैं।\n\nअन्य स्थानों में अभिलक्ष्य प्रतिरोध भाषा (और जावा प्रतिदर्शन भाषा जैसे विनिर्देश) और विशेष रूप से अभिकल्पनाओं (डिजाइनों) के निष्पादन, यदि विनिर्देश नहीं हो तो भी, की अनुमति देने वाले मॉडल-चालित संरचना के अनुप्रयोग के साथ-साथ सॉफ्टवेयर डेवलपमेंट का वर्गीकरण फैल रहा है।\n\nसॉफ्टवेयर के विकास में एक अन्य उभरती हुई प्रवृत्ति तर्क के किसी रूप में एक विनिर्देश लेखन (साधारणतः FOL का परिवर्तन) करना और फिर उस तर्क का निष्पादन उसी प्रकार करना है जैसे कि यह कोई प्रोग्राम हो। वर्णन तर्क पर आधारित OWL भाषा इसका एक उदहारण है। तार्किक रूप में और तार्किक रूप से अंग्रेजी के कुछ संस्करणों (या अन्य स्वाभाविक भाषा) रूपों का स्वतः प्रतिचित्रण करने और तर्क को सीधे निष्पादित करने का काम चल रहा है। इसके उदाहरण हैं नियंत्रित प्राकृतिक अंग्रेजी भाषा और इंटरनेट व्यवसाय संबंधी तर्क, जिन्हें शब्दकोश या वाक्य विन्यास को नियंत्रित नहीं करना पड़ता है। द्विदिशी अंग्रेजी-तार्किक प्रतिचित्रण और तर्क का सीधे निष्पादन करने वाले तंत्र की एक विशेषता है कि व्यवसायिक या वैज्ञानिक स्तर पर उनके द्वारा अंग्रेजी में उनके परिणामों की व्याख्या करायी जा सकती है।\n\nसरकारी जवाबदेही कार्यालय ने, 2003 के संघीय उड्डयन प्रशासन की वायु यातायात नियंत्रण के आधुनिकीकरण कार्यक्रमों के रिपोर्ट में प्रमुख अधिग्रहण संबंधी तंत्रों के प्रबंधन के लिए एजेंसी के मार्गदर्शन का अनुपालन करते हुए निम्नलिखित सिफारिशें की है।\n\n\nविकास की कुछ और विधियां:\n\n\nसंबंधित विषय:\n\n", "id": "181843", "title": "सॉफ्टवेयर डेवलपमेंट प्रक्रिया डेवेलपमेंट"}
{"url": "https://hi.wikipedia.org/wiki?curid=181848", "text": "रेग्युलर ऍक्सप्रैशन\n\nनियमित व्यंजक या रेग्युलर ऍक्सप्रैशन कम्प्यूटिंग में स्ट्रिंग्स की खोज (find) या खोजो-और-बदलो (find and replace) के लिए संक्षिप्त, लचीला और सुविधाजनक तरीका है। उदाहरण के लिये कम[लर] खोजने पर यह कमल को भी खोजेगा और कमर को भी। रेग्युलर ऍक्सप्रैशन को regex या regexp के रूप में संक्षेपित किया जाता है। ye do prakar ke hote h.zero strings ko null strings bhi khte h\n\nरेग्युलर ऍक्सप्रैशन का प्रयोग कई प्रोग्रामन भाषाओं में करना सम्भव है (जैसे जावास्क्रिप्ट में) इसके प्रयोग से एक ही लाइन में बहुत बड़ी बात कही या लिखी जा सकती है जिससे प्रोग्राम छोटा और सुवाच्य (वाचने में सरल) हो जाता है। जो प्रोग्रामर नहीं हैं उनके लिये यह 'फाइण्ड ऐण्ड रिप्लेस' के रूप में इसका बहुत उपयोग है।\n\nनिम्नलिखित उदाहरण कुछ ऐसी विशेषताओं को स्पष्ट करते हैं, जिन्हें रेग्युलर ऍक्सप्रैशन में अभिव्यक्त किया जा सके: \n\nरेग्युलर ऍक्सप्रैशन इन उदाहरणों से भी अधिक जटिल हो सकते हैं:\nरेग्युलर ऍक्सप्रैशन के प्रयोग कई पाठ संपादकों द्वारा उपयोगिता एवं भाषाओँ की प्रोग्रामिंग में पैटर्न पर आधारित मूल पाठ की खोज और उसमें मनचाहे बदलाव के लिए किया गए हैं। उदाहरण के लिए, Perl, Ruby और Tcl सशक्त रेग्युलर ऍक्सप्रैशन इंजिन उनके वाक्य विन्यास में बना हुआ है। Unix वितरणों के द्वारा प्रदत्त अनेक उपयोगिताएं -- संपादक ed एवं फिल्टर grep—रेग्युलर ऍक्सप्रैशन की अवधारणा को लोकप्रिय बनाने में सर्वप्रथम थे।\n\nवाक्य रचना के एक उदाहरण के रूप में, रेग्युलर ऍक्सप्रैशन codice_1 का प्रयोग \"शब्द सीमाओं\" (codice_2 द्वारा संकेतित) के बाद आने वाले \"\"ex\" \" स्ट्रिंग के सभी उदाहरणों की खोज के लिए हो सकता है। अल्पज्ञों की शब्दावली में, codice_1 अपने से मिलता जुलता स्ट्रिंग \"ex\" को दो संभावित क्षेत्रों में खोज लेगा, शब्दों के आरंभ में और एक स्ट्रिंग में दो वर्णों के बीच में, जिसमें से एक तो शब्द वर्ण है और दूसरा शब्द वर्ण नहीं है। इस प्रकार, स्ट्रिंग में \"Texts for experts\", codice_1 \"एक्सपर्ट्स\" में तो \"\"ex\" \" के साथ मेल खाता है, लेकिन \"Texts\" में मेल नहीं खाता (क्योंकि \"\"ex\" \" एक शब्द की सीमा में आ जाता है न कि शब्द सीमा के तुंरत बाद).\n\nकई आधुनिक कम्प्यूटिंग प्रणालियां एक फाइल सिस्टम से फाइलनेम्स के साथ मेल खिलाने के लिए वाइल्डकार्ड वर्ण उपलब्ध कराती हैं। यह कई कमांड-लाइन शेल्स की आभ्यंतर क्षमता है, जिसे ग्लोबिंग के रूप में भी जाना जाता है। वाइल्डकार्ड आमतौर पर रेग्युलर ऍक्सप्रैशन से केवल विकल्पों को सीमित रूप में सूचित करने के मामले में भिन्न है।\n\n\nरेग्युलर ऍक्सप्रैशन वाक्य विन्यास की उत्पत्ति में उपयोगी हैं जो प्रणालियों को उजागर करते हैं, जैसे कि डेटा सत्यापन और कई अन्य कार्यों के निष्पादन में.\n\nरेग्युलर ऍक्सप्रैशन खोज इंजन के लिए उपयोगी होगा जैसे Google, Bing या Yahoo! Search में तो संपूर्ण डेटाबेस से होकर गुजरते हुए प्रोसेसिंग करना जटिलता और रिजेक्स की डिजाइन को देखते हुए अधिक कम्प्यूटर संसाधन खर्च करना होगा। हालांकि कई स्थितियों में सिस्टम प्रशासक रिजेक्स आधारित आंतरिक प्रश्नों को चला सकता है, अधिकतर सर्च इंजन लोगों को रिजेक्स की सहायता उपलब्ध नहीं कराते. एक उल्लेखनीय अपवाद गूगल कोड सर्च है।\n\nरेग्युलर ऍक्सप्रैशन, जिसे प्रायः पैटर्न भी कहा जाता है, एक ऐसा सूचक है जो स्ट्रिंग्स के एक सेट के बारे में विस्तार से बतलाता है। उनका उपयोग आमतौर पर तत्वों की सूची बनाए बिना सेट के बारे में संक्षेप में बताने के लिए होता है। उदाहरण के लिए, 'सेट' जिसमें तीन स्ट्रिंग्स होते हैं \"\"Handel\" \", \"\"Händel\" \" और \"\"Haendel\" \" को codice_5 codice_6 के पैटर्न के रूप में वर्णित किया जा सकता है (या वैकल्पिक रूप से, ऐसा कहा जाता है कि पैटर्न तीन में से प्रत्येक स्ट्रिंग के साथ \"मेल\" खाते हैं). अधिकतर आकारवादों (श्रृंखलाओं) में अगर कोई रिजेक्स किसी खास सेट के साथ मेल खाता है तो यह जान लेना चाहिए कि ऐसे सूचकों की अनंत संख्या है। अधिकांश आकारवाद निम्नलिखित क्रियाओं के लिए रेग्युलर ऍक्सप्रैशन बनाती हैं।\n\n\n\n\nइन बनावटों को मनमाने ढंग से जटिल सूचकों के गठन के लिए एक साथ जोड़ दिया जा सकता है, ठीक उसी तरह जिस तरह कोई अंकगणितीय सूचकों का गठन संख्याओं एवं संक्रियाओं +, −, × और ÷ से कर सकता है। उदाहरण के लिए, codice_13codice_14 एवं codice_15 दोनों ही प्रामाणिक पैटर्न हैं, जो पिछले उदाहरण की ही तह समान स्ट्रिंग्स के साथ मेल खाता है, वह पिछला उदाहरण है codice_5codice_6.\n\nरेग्युलर ऍक्सप्रैशन के लिए सटीक वाक्य-विन्यास उपकरणों और संदर्भ के साथ बदलते रहते हैं; अधिक विवरण \"वाक्य-विन्यास\" खंड में दिया गया है।\n\nरेग्युलर ऍक्सप्रैशन की जड़ें ऑटोमेटा सिद्धांत एवं औपचारिक भाषा सिद्धांत में निहित हैं, दोनों ही सैद्धांतिक कंप्यूटर विज्ञान के अंग हैं। ये क्षेत्र प्रशिक्षण कंप्यूटेशन (ऑटोमेटा) एवं औपचारिक भाषाओं के वर्णन एवं वर्गीकरण की पद्धतियों के मॉडल हैं। 1950 के दशक में, गणितज्ञ स्टीफेन कोल क्लीन ने अपने गणितीय संकेतन का प्रयोग करते हुए इन मॉडलों का सविस्तार वर्णन किया, जिसे \"रेगुलर सेट्स\" कहते हैं। SNOBOL की भाषा पैटर्न मिलान कराने का आरंभिक उपकरण था, लेकिन रेग्युलर ऍक्सप्रैशन के सदृश नहीं. केन थॉम्पसन ने टेक्स्ट फाइल्स में पैटर्न्स के मिलान कराने के माध्यम के रूप में क्लीन के संकेतन का उपयोग संपादक QED के गठन में किया। बाद में उन्होंने Unix संपादक ed में इस क्षमता को जोड़ा, जिसने अंततः रेग्युलर ऍक्सप्रैशन के उपयोग के लिए लोकप्रिय खोजी उपकरण ग्रेप का पता लगाया (\"grep\" शब्द रेग्युलर ऍक्सप्रैशन ed संपादक की खोज के कमांड से लिया गया है codice_18 जिसमें \"re\" रेग्युलर ऍक्सप्रैशन का द्योतक है). समयांतराल से, रेग्युलर ऍक्सप्रैशन के थॉम्पसन के मौलिक रूपांतर में कई बदलाव आए हैं, जिनका व्यापक प्रयोग Unix और Unix जैसी ही प्रयोज्यता, expr, AWK, Emacs, vi और lex सहित हुआ है।\n\nPerl और Tcl रेग्युलर ऍक्सप्रैशन हेनरी स्पेंसर लिखित रिजेक्स लाइब्रेरी से ली गई थीं, हालांकि Perl को स्पेंसर की लाइब्रेरी में अनेक नई विशेषताएं जोड़ने के लिए प्रसारित किया गया।फिलिप हेज़ेल ने PCRE (पर्ल कम्पैटिबल रेग्युलर ऍक्सप्रैशन) को विकसित किया, जो पर्ल की रेग्युलर ऍक्सप्रैशन की कार्यशीलता की लगभग नकल करने की कोशिश करता है, एवं अनेक आधुनिक उपकरणों PHP और Apache HTTP Server के द्वारा प्रयोग में लाया जाता है। Perl 6 की डिज़ाइन की प्रचेष्टा का एक हिस्सा पर्ल के रेग्युलर ऍक्सप्रैशन के एकीकरण में सुधार तथा उनके कार्यक्षेत्र एवं क्षमताओं को बढ़ाना ताकि सूचकों की पदव्याख्या के व्याकरण को परिभाषित करने का मौका दिया जा सके. परिणामस्वरूप एक लघु भाषा Perl 6 नियम बनी, जिसका प्रयोग Perl 6 ग्रामर को परिभाषित करने और साथ ही साथ भाषा में प्रोग्रामर्स के लिए उपकरण मुहैया कराने के लिया होता है। ये नियम पर्ल 5.x रेग्युलर ऍक्सप्रैशन की विशेषताओं को कायम रखते हैं, लेकिन उप-नियमों के द्वारा पुनःप्रवाही सुंदर पद व्याख्या की BNF-शैली की परिभाषा को भी अनुमति प्रदान करते हैं।\n\nदस्तावेज़ और डाटाबेस मॉडलिंग के लिए संरचित सूचना मानकों में रेग्युलर ऍक्सप्रैशन का प्रयोग 1960 के दशक में आरंभ हुआ और 1980 के दशक में फैल गया, जब ISO SGML (ANSI \"GCA 101-1983\" द्वारा पूर्व आरोपित) उद्योग मानक समेकित हुए. भाषा मानकों में संरचना की सुस्पष्टता के केंद्र में रेग्युलर ऍक्सप्रैशन हैं। समूह वाक्य विन्यास में DTD तत्व का सरल उपयोग स्पष्ट है।\n\nपैटर्न मिलान: इतिहास भी देखें\n\nरेग्युलर ऍक्सप्रैशन को औपचारिक भाषा सिद्धांत के रूप में परिभाषित किया जा सकता है। रेग्युलर ऍक्सप्रैशन में स्थिरांक और ऑपरेटर्स होते हैं, जो स्ट्रिंग्स के सेट्स इन सेटों पर क्रियाशीलताओं को क्रमशः सूचित करते हैं। निम्नलिखित परिभाषा मानक है और औपचारिक भाषा सिद्धांत की अधिकांश पाठ्य पुस्तकों में पायी जाती है. एक सीमाबद्ध वर्णमाला Σ को देखते हुए निम्नलिखित स्थिरांकों की परिभाषा दी गई है:\n\n\nनिम्नलिखित संक्रियाएं परिभाषित हैं: \n| α in \"R\" and β in \"S\" } को संकेतित करता है। उदाहरण के लिए {\"ab\", \"c\"}{\"d\", \"ef\"} = {\"abd\", \"abef\", \"cd\", \"cef\"}.\n\n| \"S\" जो \"R\" और \"S\" के गठबंधन को संकेतित करता है। उदाहरण के लिए {\"ab\", \"c\"}|{\"ab\", \"d\", \"ef\"} = {\"ab\", \"c\", \"d\", \"ef\"}.\n\n\nकोष्ठकों से बचने के लिए यह मान लिया गया है कि क्लीन तारा को ही सर्वोच्च प्राथमिकता प्राप्त है और इसके बाद संयोजन और तब जाकर सेट गठबंधन को. अगर कोई संशय नहीं है तो कोष्ठकों का लोप हो सकता है। उदाहरण के लिए, codice_19 को codice_20 और codice_21 को codice_22 जैसा भी लिखा जा सकता है। \nकई पाठ्य पुस्तकों में लंबरूप बार के बदले संयोजन के लिए , , या चिह्नों का प्रयोग मिलता है।\n\nउदाहरण: \n|b* {ε, {0}a, \"b\", \"bb\", \"bbb\", ...} को संकेतित करता है।\n\n|b)* खाली स्ट्रिंग: {ε, {0}a, \"b, \"aa\", \"ab\", \"ba\", \"bb\", \"aaa\", ...} समेत \"a\" और \"b\" \" के अलावा बिना प्रतीक चिह्नों के सभी स्ट्रिंग के सेट को संकेतित करता है।\n\n|ε) \"a\" से आरंभ कर स्ट्रिंग्स के सेट को, तब जीरो अथवा अधिक \"b\" s और अंत में विकल्प के साथ a \"c\" : \n", "id": "181848", "title": "रेग्युलर ऍक्सप्रैशन"}
